<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Sometimes Jeremy Thinks</title>
    <link>https://ackso.net/project/</link>
    <description>Recent content in Projects on Sometimes Jeremy Thinks</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Jeremy T Jackson</copyright>
    <lastBuildDate>Sat, 20 Jan 2018 17:18:29 -0700</lastBuildDate>
    <atom:link href="/project/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Exercises for Programmers 5 - NODEJS</title>
      <link>https://ackso.net/project/exercises-for-programmers-5/</link>
      <pubDate>Sat, 20 Jan 2018 17:18:29 -0700</pubDate>
      
      <guid>https://ackso.net/project/exercises-for-programmers-5/</guid>
      <description>

&lt;p&gt;I had to take a break from working through the book to get a few other &amp;ldquo;life&amp;rdquo; things
done, but with those in the bag I was able to hop back into it today and finish up
Chapter 3.&lt;/p&gt;

&lt;p&gt;After the amount of learning I did with Exercise 10, the remaining three exercises
ended up being really easy and following basically the same pattern in all three
cases.&lt;/p&gt;

&lt;p&gt;Repository for this is still
&lt;a href=&#34;https://github.com/jeremy-j-ackso/exercises-for-programmers-nodejs&#34; target=&#34;_blank&#34;&gt;on GitHub.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once again, I&amp;rsquo;m going to leave out the tests from this coverage since it&amp;rsquo;s all
pretty straightforward and follows the same pattern each time.
I was expecting the test file for this chapter to be over 1,000 lines of code, but
somehow it only came out to 990.
It makes me wonder what test cases I overlooked as I was working on these
last three exercises.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m also going to leave out the code implementing the &lt;code&gt;readline&lt;/code&gt; functionality.
Since the introduction of &lt;code&gt;Promise&lt;/code&gt; chaining that I implemented in Exercise 10
I haven&amp;rsquo;t had to do anything new and interesting there either, and once again
it looks like I&amp;rsquo;ve captured a good pattern for how to do that.&lt;/p&gt;

&lt;p&gt;I started on these around 11 this morning.
It&amp;rsquo;s now 5:30 PM and I&amp;rsquo;ve done a lot of driving and walking during that time in
addition to writing code, so I think I&amp;rsquo;ve got a total of maybe 2-3 hours of
actual coding time in today.
So I feel like I made a lot of progress in being able to wrap in the chapter in
a fairly efficient and concise manner.&lt;/p&gt;

&lt;p&gt;I also think I&amp;rsquo;ve found a pretty good function pattern for checking that numeric
inputs are valid.
I should break that out into a utility module so that I stop re-creating it each
time.
That would help cut down on the number of tests I have to write, and also let me
write less code each time I start on a new exercise.
Breaking it out and updating all of the calls could take some time though.
For the moment I&amp;rsquo;m more excited to just plow through the exercises.&lt;/p&gt;

&lt;h1 id=&#34;exercise-11&#34;&gt;Exercise 11&lt;/h1&gt;

&lt;p&gt;This exercise is a Euro to US Dollar currency converter.
I have no idea if the conversion rates are even correct.
I could probably go and find an API to supply this, but researching that could
have taken a bit more time than I was willing to commit to at this point.
Not that it would have been difficult once I found the API.
It would have actually been a good opportunity to do some practice with &lt;code&gt;Stream&lt;/code&gt;.
Maybe I&amp;rsquo;ll consider a refactor of that at some point.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function checkInput(value) {
  if (typeof value !== &#39;string&#39;) {
    throw new Error(&#39;input amount must be delivered as a string&#39;)
  }
  if (Number.isNaN(parseFloat(value)) || /\d+\.\d+\.\d+/.test(value)) {
    throw new Error(&#39;input must be parseable as a number&#39;)
  }
  return true
}

function calculateConversion(amount_from, rate_from, rate_to) {
  if (typeof amount_from !== &#39;number&#39; ||
    typeof rate_from !== &#39;number&#39; ||
    typeof rate_to !== &#39;number&#39;) {
    throw new Error(&#39;all inputs must be numeric&#39;)
  }
  const output = (amount_from * rate_from) / rate_to
  return output.toFixed(2)
}

function buildConversion(amount_from, rate_from) {
  checkInput(amount_from)
  checkInput(rate_from)
  const parsed_from = parseFloat(amount_from)
  const parsed_rate = parseFloat(rate_from)
  const rate_to = 98.24
  const converted_value = calculateConversion(parsed_from, parsed_rate, rate_to)

  return `${amount_from} euros at an exchange rate of ${rate_from} is ${converted_value} US dollars`
}

module.exports = {
  calculateConversion,
  checkInput,
  buildConversion,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;exercise-12&#34;&gt;Exercise 12&lt;/h1&gt;

&lt;p&gt;This one is a basic interest calculator, without doing any compounding.
That made the math super easy.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function simpleInterest(principal, rate, period) {
  const output = principal + (principal * period * rate * 0.01)
  return output.toFixed(2)
}

function checkSIinputs(value) {
  if (typeof value !== &#39;string&#39;) {
    throw new Error(&#39;input amount must be delivered as a string&#39;)
  }
  if (Number.isNaN(parseFloat(value)) || /\d+\.\d+\.\d+/.test(value)) {
    throw new Error(&#39;input must be parseable as a number&#39;)
  }
  return true
}

function buildSIstring(principal, rate, period) {
  checkSIinputs(principal)
  checkSIinputs(rate)
  checkSIinputs(period)

  const parsed_principal = parseFloat(principal)
  const parsed_rate = parseFloat(rate)
  const parsed_period = parseFloat(period)
  const accrued = simpleInterest(parsed_principal, parsed_rate, parsed_period)

  return `After ${period} years at ${rate}%, the investment will be worth $${accrued}.`
}

module.exports = {
  simpleInterest,
  checkSIinputs,
  buildSIstring,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;exercise-13&#34;&gt;Exercise 13&lt;/h1&gt;

&lt;p&gt;This one is for compounding interest.
A little bit more complicated mathematically, but again: not really a problem.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function compound_interest(principal, rate, period, frequency) {
  const exponent = period * frequency
  const small_interest = 1 + ((0.01 * rate) / frequency)
  const output = principal * (small_interest ** exponent)
  return output.toFixed(2)
}

function checkCIinputs(value) {
  if (typeof value !== &#39;string&#39;) {
    throw new Error(&#39;input amount must be delivered as a string&#39;)
  }
  if (Number.isNaN(parseFloat(value)) || /\d+\.\d+\.\d+/.test(value)) {
    throw new Error(&#39;input must be parseable as a number&#39;)
  }
  return true
}

function buildCIstring(principal, rate, period, frequency) {
  checkCIinputs(principal)
  checkCIinputs(rate)
  checkCIinputs(period)
  checkCIinputs(frequency)
  const p_principal = parseFloat(principal)
  const p_rate = parseFloat(rate)
  const p_period = parseFloat(period)
  const p_frequency = parseFloat(frequency)

  const accrued = compound_interest(p_principal, p_rate, p_period, p_frequency)

  return `$${principal} invested at ${rate}% for ${period} years compounded ${frequency} times per year is $${accrued}`
}

module.exports = {
  compound_interest,
  checkCIinputs,
  buildCIstring,
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Refactoring Mock Couch</title>
      <link>https://ackso.net/project/refactoring-mock-couch/</link>
      <pubDate>Sat, 06 Jan 2018 15:48:48 -0700</pubDate>
      
      <guid>https://ackso.net/project/refactoring-mock-couch/</guid>
      <description>

&lt;p&gt;So I&amp;rsquo;m working on a boilerplate and website that relies on an
&lt;a href=&#34;https://couchdb.apache.org&#34; target=&#34;_blank&#34;&gt;Apache CouchDB&lt;/a&gt;
database.
The site boilerplate, site, and database all work pretty well, but I want to use
some CI/CD tools to run testing.&lt;/p&gt;

&lt;p&gt;I have a couple of options open to me such as using configuration management to set
up the whole environment, using Docker for key pieces of the environment, or finding
some libraries that mock some of my required components, like CouchDB.
After looking into what I would have to learn in order to implement each of them, I
ended up deciding that for the near-term just going with mocking libraries would be
the easiest.&lt;/p&gt;

&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#why-refactor-this-where-did-this-idea-come-from&#34;&gt;Why refactor this? Where did this idea come from?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#error-analysis&#34;&gt;Error Analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#why-not-stop-if-somebody-already-made-a-pull-request-for-your-problem&#34;&gt;Why not stop if somebody already made a Pull Request for your problem?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#abuse-of-ramda-compose&#34;&gt;Abuse of &lt;code&gt;ramda.Compose()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#package-linting&#34;&gt;Package Linting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#things-that-i-m-leaving-alone-for-now&#34;&gt;Things that I&amp;rsquo;m leaving alone&amp;hellip; for now.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#working-on-the-code&#34;&gt;Working on the code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#working-on-the-tests&#34;&gt;Working on the tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#running-the-tests&#34;&gt;Running the tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#wrapping-up&#34;&gt;Wrapping up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;


&lt;h1 id=&#34;why-refactor-this-where-did-this-idea-come-from&#34;&gt;Why refactor this? Where did this idea come from?&lt;/h1&gt;

&lt;p&gt;Since the site is using &lt;a href=&#34;https://redis.io&#34; target=&#34;_blank&#34;&gt;Redis&lt;/a&gt; for the cookie store, we&amp;rsquo;re using
the excellent &lt;a href=&#34;https://www.npmjs.com/package/redis-mock&#34; target=&#34;_blank&#34;&gt;redis-mock&lt;/a&gt; for that.
Almost entirely based on the hilarious logo for it (not actually true), we quickly
decided on &lt;a href=&#34;https://www.npmjs.com/package/mock-couch&#34; target=&#34;_blank&#34;&gt;mock-couch&lt;/a&gt; to mock our CouchDB.
There was one problem though: the current version of mock-couch doesn&amp;rsquo;t run with NodeJS 8.x.&lt;/p&gt;

&lt;p&gt;So I decided to refactor it in order to bring the packages up-to-date, hopefully
get it working with current versions of NodeJS, and take advantage of newer
language features.&lt;/p&gt;

&lt;p&gt;I forked it a few months ago and have been working on it on-and-off
&lt;a href=&#34;https://github.com/jeremy-j-ackso/mock-couch/tree/update-packages&#34; target=&#34;_blank&#34;&gt;here, under the &lt;code&gt;update-packages&lt;/code&gt; branch.&lt;/a&gt;
After I&amp;rsquo;m done I&amp;rsquo;m going to submit it back to the original author to see if he&amp;rsquo;ll
accept my PR for this.
If he doesn&amp;rsquo;t we&amp;rsquo;ll see where this goes from there.
Maybe I&amp;rsquo;ll continue development as a new package if the merge request is declined?&lt;/p&gt;

&lt;h1 id=&#34;error-analysis&#34;&gt;Error Analysis&lt;/h1&gt;

&lt;p&gt;When I was initally trying to use this package, it always immediately threw a bunch
errors.
I was able to trace the errors back and found an &lt;a href=&#34;https://github.com/chris-l/mock-couch/issues/53&#34; target=&#34;_blank&#34;&gt;open issue&lt;/a&gt;
that was related.
I think that it&amp;rsquo;s mostly being caused by an older version of &lt;a href=&#34;http://restify.com/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;restify&lt;/code&gt;&lt;/a&gt; and the
&lt;a href=&#34;https://www.npmjs.com/package/spdy&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;spdy&lt;/code&gt;&lt;/a&gt; package that it relies on.
A subsequent commenter on that issue discovered that this problem is found only
with NodeJS &amp;gt; 7.x, so that means my NodeJS 8.x project is impacted.
So far, that commmenter&amp;rsquo;s pull request has not been merged in even though it&amp;rsquo;s a
fairly minor change.&lt;/p&gt;

&lt;h1 id=&#34;why-not-stop-if-somebody-already-made-a-pull-request-for-your-problem&#34;&gt;Why not stop if somebody already made a Pull Request for your problem?&lt;/h1&gt;

&lt;p&gt;Because I think there are some other benefits to a deeper refactor in this case.&lt;/p&gt;

&lt;p&gt;Case in point: the &lt;a href=&#34;http://ramdajs.com/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ramda&lt;/code&gt;&lt;/a&gt; package has evolved very much since the version this
was written for and current versions of &lt;code&gt;ramda&lt;/code&gt; actually break this package.
Sure, that older version works, but this package also has reliance on it in ways that don&amp;rsquo;t
simplify the code, and in some cases make it more complex for developers unfamiliar
with &lt;code&gt;ramda&lt;/code&gt;.
In fact, I found that in many cases the vanilla JavaScript solution was easier to
read and understand than the &lt;code&gt;ramda&lt;/code&gt; implementation.
This holds most true for the uses of &lt;code&gt;ramda&lt;/code&gt;&amp;rsquo;s &lt;code&gt;Compose()&lt;/code&gt; function.&lt;/p&gt;

&lt;h1 id=&#34;abuse-of-ramda-compose&#34;&gt;Abuse of &lt;code&gt;ramda.Compose()&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;ramda.Compose()&lt;/code&gt; lets you chain a bunch of function calls together, each one putting
its outputs into the next one&amp;rsquo;s input.
Except it&amp;rsquo;s inverted.
Which isn&amp;rsquo;t intuitive &lt;strong&gt;at all!&lt;/strong&gt;
You end up having to read UP the page in order to understand how the code block flows.&lt;/p&gt;

&lt;p&gt;This might be acceptable if some very complex things were going on, but most of what
was going on could easily be solved with plain &lt;code&gt;Array&lt;/code&gt; methods.&lt;/p&gt;

&lt;h1 id=&#34;package-linting&#34;&gt;Package Linting&lt;/h1&gt;

&lt;p&gt;The package as written uses &lt;code&gt;jslint&lt;/code&gt;, which is great.
However I kind of prefer &lt;code&gt;eslint&lt;/code&gt; and (in my opinion) the better tooling and
configuration that it comes with.
So &lt;code&gt;jslint&lt;/code&gt; has been replaced with &lt;code&gt;eslint&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;things-that-i-m-leaving-alone-for-now&#34;&gt;Things that I&amp;rsquo;m leaving alone&amp;hellip; for now.&lt;/h1&gt;

&lt;p&gt;For the moment, this is using &lt;code&gt;jasmine&lt;/code&gt; tests.
I somewhat prefer &lt;code&gt;mocha&lt;/code&gt;, but I want to leave &lt;code&gt;jasmine&lt;/code&gt; in place at least until I&amp;rsquo;m
once again passing all tests after the refactor.
Maybe at that point I&amp;rsquo;ll replace it with &lt;code&gt;mocha&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m also leaving &lt;code&gt;grunt&lt;/code&gt; in place as the task runner.
It isn&amp;rsquo;t a very complex &lt;code&gt;gruntfile&lt;/code&gt; at this point, so it may ultimately not be needed.
I could probably replace grunt with just &lt;code&gt;npm scripts&lt;/code&gt; with how simple they are.&lt;/p&gt;

&lt;h1 id=&#34;working-on-the-code&#34;&gt;Working on the code&lt;/h1&gt;

&lt;p&gt;Since I really wanted this to be totally up-to-date I started off by doing an
&lt;code&gt;npm update&lt;/code&gt;.
This updated all of the packages to their most current versions and this is where I
discovered the breaking changes that more modern versions of &lt;code&gt;ramda&lt;/code&gt; introduce.
I left everything in place as it was for the moment.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;eslint --fix&lt;/code&gt; did a ton of work in whipping all of this code into shape.
After it&amp;rsquo;s initial pass to fix things that are pretty straightforward I then loaded
everything in &lt;code&gt;/lib&lt;/code&gt; into my &lt;code&gt;vim&lt;/code&gt; buffers and started working through the remaining
lint errors.&lt;/p&gt;

&lt;p&gt;As I went along I also tried to update the broken &lt;code&gt;ramda&lt;/code&gt; code, but time after time
I discovered that what was going on in the &lt;code&gt;ramda&lt;/code&gt; calls was pretty basic stuff that
could quite easily be done using vanilla JavaScript, often with &lt;code&gt;Array&lt;/code&gt; methods.
So after replacing a couple of &lt;code&gt;ramda&lt;/code&gt; calls with vanilla equivalents I did a quick
peak at all of the other places using &lt;code&gt;ramda&lt;/code&gt; and discovered that pretty much all of
them were trivial replacements, and there were only a couple of instances where I would
have to go a bit beyond &amp;ldquo;trivial&amp;rdquo; to convert things to vanilla JS.
So I came to the conclusion that &lt;code&gt;ramda&lt;/code&gt; wasn&amp;rsquo;t really needed and removed it from
the package dependencies.&lt;/p&gt;

&lt;p&gt;With that out of the way I continued working through all of the buffered files, fixing
linting errors and replacing now-defunct &lt;code&gt;ramda&lt;/code&gt; calls with vanilla JS.&lt;/p&gt;

&lt;h1 id=&#34;working-on-the-tests&#34;&gt;Working on the tests&lt;/h1&gt;

&lt;p&gt;Once again &lt;code&gt;eslint --fix&lt;/code&gt; was a lifesaver here.
It fixed a bunch of formatting issues in the tests, and the remaining ones were pretty
simple to deal with.
Mostly things like using destructuring, having individual &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; assignments
instead of chaining assignments with commas, implementing arrow functions for unnamed
functions, stuff like that.&lt;/p&gt;

&lt;h1 id=&#34;running-the-tests&#34;&gt;Running the tests&lt;/h1&gt;

&lt;p&gt;This is where I&amp;rsquo;m at now.
It isn&amp;rsquo;t as bad as I was thinking it would be.
Roughly 50% of the tests are passing, which means that I probably just made some
goofy errors in a couple of key places as I was converting away from &lt;code&gt;ramda&lt;/code&gt;.
I&amp;rsquo;m about to get into that now.&lt;/p&gt;

&lt;h1 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h1&gt;

&lt;p&gt;Once I finish up getting all of the tests to pass I&amp;rsquo;ll update with a new post,
sumbit the merge request and see where this goes after that.
At the very least I&amp;rsquo;ll be able to make use of it for my purposes, so definitely looking
forward to that.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exercises for Programmers 4 - NODEJS</title>
      <link>https://ackso.net/project/exercises-for-programmers-4/</link>
      <pubDate>Fri, 05 Jan 2018 21:14:35 -0700</pubDate>
      
      <guid>https://ackso.net/project/exercises-for-programmers-4/</guid>
      <description>

&lt;p&gt;As I mentioned in the previous post, chapter 3 is getting a bit more complex.
I&amp;rsquo;m through Exercise 10, and that one ended up being pretty complex.
I ended up breaking out the functionality as lowly as I reasonably could
just to help control the complexity.
Part of the outcome of that is that I also had to write waaay more tests.
I&amp;rsquo;m right around 750 lines in my chapter 3 test file, and around 225 of those
lines are just for this one exercise.&lt;/p&gt;

&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#working-up-the-functions-and-tests&#34;&gt;Working up the functions and tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dealing-with-user-input-and-eliminating-callback-hell&#34;&gt;Dealing with user input and eliminating callback hell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#things-i-would-change-for-the-future&#34;&gt;Things I would change for the future&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#self-checkout-readline&#34;&gt;Self Checkout &lt;code&gt;readline&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#self-checkout-fuctions&#34;&gt;Self Checkout Fuctions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;


&lt;h1 id=&#34;working-up-the-functions-and-tests&#34;&gt;Working up the functions and tests&lt;/h1&gt;

&lt;p&gt;I ended up writing 7 functions for this exercise just to produce outputs,
most of which are fairly short and highly specific to their purpose.
For instance, rather than calculating a subtotal for an item as &lt;code&gt;price * quantity&lt;/code&gt;
I converted it into a function call that does the math, but also takes care
of decimal precision.
Doing this for as many feature aspects as possible helped me keep my main
function that produces the final output fairly clean.
It also increased testability of each component piece so that I could
more easily test for edge cases.
So even though I ended up writing more tests and test cases, reasoning
about the tests and what the functions were supposed to do became &lt;strong&gt;much,
MUCH&lt;/strong&gt; easier.&lt;/p&gt;

&lt;p&gt;I also decided to break out some additional pieces of functionality that I
could see a lot of people leaving in the main function. One is responsibile for
deciding if a user input is valid.
It performs several tests to either throw one of three errors or return &lt;code&gt;true&lt;/code&gt;.
Breaking this out and calling it as part of the main function let me keep
my &lt;code&gt;readline&lt;/code&gt; functions a bit cleaner and also minimized the complexity of
generating errors from bad inputs.&lt;/p&gt;

&lt;p&gt;The other function that others might have left in is responsible for building
the output string.
It takes numeric values calculated by other functions, sticks them in an array
of template strings, and then returns those strings joined together with
newline &lt;code&gt;\n&lt;/code&gt; characters.&lt;/p&gt;

&lt;h1 id=&#34;dealing-with-user-input-and-eliminating-callback-hell&#34;&gt;Dealing with user input and eliminating callback hell&lt;/h1&gt;

&lt;p&gt;The last big takeaway I got from working through this exercise was in dealing
with user interaction via &lt;code&gt;readline&lt;/code&gt;.
I had mentioned in one of the earlier Exercises for Programmers posts that
I was seeing a very strong possibilty of having to deal with callback hell
in working with &lt;code&gt;readline.question()&lt;/code&gt;.
That hell almost became realized in working on this exercise.
The author has you asking two questions for each of three items: &amp;ldquo;What&amp;rsquo;s the
price?&amp;rdquo; and &amp;ldquo;What&amp;rsquo;s the quantity?&amp;rdquo;
This is an obvious situation where code re-use shows some benefits as well.
So between code re-use and the threat of callback hell I decided to pay
special attention to how this would interact with users and how I could
streamline and simplify my &lt;code&gt;readline&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I considered several different possible courses of action, noting that
&lt;code&gt;readline&lt;/code&gt; produces Streams, but after doing some reading into Streams,
Promises, and Generators (the three most likely places a solution for this
would come from) I settled on Promises as the correct way to handle this.
Since I have two questions, I wrote two functions that each returns
a &lt;code&gt;new Promise()&lt;/code&gt; to ask them.
Since Promises can be chained together using the &lt;code&gt;then()&lt;/code&gt; method, and the
output of each link in the chain is passed to the next &lt;code&gt;then()&lt;/code&gt; call I
conveniently end up with a nice way to build up an Object piece by piece
that can ultimately be passed into my main funciton that I&amp;rsquo;ve already written.&lt;/p&gt;

&lt;p&gt;Each question also has to mention which &amp;ldquo;item number&amp;rdquo; it&amp;rsquo;s asking about.
Since the book&amp;rsquo;s requirements specify that we&amp;rsquo;re only concerned about 3
items, and not a potentially infinite number, I decided that the most prudent
thing to do would be to explicitly chain all 6 questions together.
It also became simpler to just make the &amp;ldquo;item number&amp;rdquo; an argument to
the question functions.
This saved me from having to write code that would analyze the Object
passed into it in order to figure out what &amp;ldquo;item number&amp;rdquo; it would be
asking about.&lt;/p&gt;

&lt;h1 id=&#34;things-i-would-change-for-the-future&#34;&gt;Things I would change for the future&lt;/h1&gt;

&lt;p&gt;I think that how I&amp;rsquo;m dealing with the &lt;code&gt;readline&lt;/code&gt; functionality is really
good, but it could definitely be improved.
I currently don&amp;rsquo;t have anything going on with the &lt;code&gt;reject&lt;/code&gt; statements
in the Promises, mostly because I haven&amp;rsquo;t given much thought about what
it would mean for possible future user input to be rejected.
In this case it may not be necessary.&lt;/p&gt;

&lt;p&gt;I could also do more to clean up the input validation and error generation.
For instance, moving the input validation closer to the &lt;code&gt;readline&lt;/code&gt;
statements would help in generating and recovering from errors earlier.
Currently it only has the possibility of generating errors after it has
already collected all of the information from the user.
I&amp;rsquo;d like to throw the error sooner and also create a way to recover from
those errors and re-ask an errored question with some guidance to the
user about valid inputs.&lt;/p&gt;

&lt;p&gt;Lastly, &lt;code&gt;selfCheckout()&lt;/code&gt; has some ugly spots.
It works, but I wouldn&amp;rsquo;t call it the most well-written and clear function
I&amp;rsquo;ve ever written.
It could use a re-write, which could eventually turn into some of the
functionality built into it being pushed out to other functions.&lt;/p&gt;

&lt;h1 id=&#34;self-checkout-readline&#34;&gt;Self Checkout &lt;code&gt;readline&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;So here&amp;rsquo;s my &lt;code&gt;readline&lt;/code&gt; module that is implemented with Promises so
that we get that nice chaining to forward the data on to subsequent
questions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;#!/usr/bin/node

const readline = require(&#39;readline&#39;)
const { selfCheckout } = require(&#39;./ex10.js&#39;)

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
})

enterPrice({}, 1)
  .then(passedData =&amp;gt; enterQty(passedData, 1))
  .then(passedData =&amp;gt; enterPrice(passedData, 2))
  .then(passedData =&amp;gt; enterQty(passedData, 2))
  .then(passedData =&amp;gt; enterPrice(passedData, 3))
  .then(passedData =&amp;gt; enterQty(passedData, 3))
  .then((passedData) =&amp;gt; {
    const output = selfCheckout(passedData)
    console.log(output)
    rl.close()
  })

function enterPrice(passedData, itemNumber) {
  return new Promise((resolve, reject) =&amp;gt; {
    rl.question(`Enter the price of item ${itemNumber}: `, (price) =&amp;gt; {
      passedData[`item${itemNumber}`] = { price }
      resolve(passedData)
      reject()
    })
  })
}

function enterQty(passedData, itemNumber) {
  return new Promise((resolve, reject) =&amp;gt; {
    rl.question(`Enter the quantity of item ${itemNumber}: `, (qty) =&amp;gt; {
      passedData[`item${itemNumber}`].qty = qty
      resolve(passedData)
      reject()
    })
  })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;self-checkout-fuctions&#34;&gt;Self Checkout Fuctions&lt;/h1&gt;

&lt;p&gt;Here&amp;rsquo;s all of the functions that do the calculations, validate inputs,
and generate outputs.
&lt;code&gt;selfCheckout()&lt;/code&gt; is the function that brings all of them together and
gets called at the end of the &lt;code&gt;readline&lt;/code&gt; Promise chain.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function itemSubtotal(price, qty) {
  const output = price * qty
  const output_fixed = output.toFixed(2)
  return output_fixed
}

function billSubtotal(subtotals) {
  const output = subtotals.reduce((arr, cv) =&amp;gt; {
    arr += cv
    return arr
  }, 0)
  const output_fixed = output.toFixed(2)
  return output_fixed
}

function tax(subtotal) {
  const taxrate = 0.055
  const output = subtotal * taxrate
  const output_fixed = output.toFixed(2)
  return output_fixed
}

function total(subtotal, tax_val) {
  const output = subtotal + tax_val
  const output_fixed = output.toFixed(2)
  return output_fixed
}

function isStringedNumber(input, type) {
  if (![&#39;money&#39;, &#39;quantity&#39;].includes(type)) {
    throw new Error(&#39;type must be one of [\&#39;money\&#39;, \&#39;quantity\&#39;]&#39;)
  }

  if ((type === &#39;money&#39; &amp;amp;&amp;amp; !/^[0-9]+(\.[0-9]{2})?$/.test(input)) || typeof input !== &#39;string&#39;) {
    throw new Error(&#39;price must be a string digit, either as an integer, or with two decimal places&#39;)
  }

  if ((type === &#39;quantity&#39; &amp;amp;&amp;amp; !/^[0-9]+$/.test(input)) || typeof input !== &#39;string&#39;) {
    throw new Error(&#39;quantity must be a string integer&#39;)
  }

  return true
}

function outputBuilder(subtotal, tax_val, total_val) {
  const output = [
    `Subtotal: $${subtotal}`,
    `Tax: $${tax_val}`,
    `Total: $${total_val}`,
  ]

  return output.join(&#39;\n&#39;)
}

function selfCheckout(input) {
  const input_keys = Object.keys(input)
  input_keys.forEach((key) =&amp;gt; {
    if (![&#39;item1&#39;, &#39;item2&#39;, &#39;item3&#39;].includes(key)) {
      throw new Error(&#39;input must be an object with three properties such that Object.keys(input) === [\&#39;item1\&#39;, \&#39;item2\&#39;, \&#39;item3\&#39;]&#39;)
    }
  })
  if (!input_keys.includes(&#39;item1&#39;) || !input_keys.includes(&#39;item2&#39;) || !input_keys.includes(&#39;item3&#39;)) {
    throw new Error(&#39;input must be an object with three properties such that Object.keys(input) === [\&#39;item1\&#39;, \&#39;item2\&#39;, \&#39;item3\&#39;]&#39;)
  }

  const input_vals = Object.values(input)
  input_vals.forEach((val) =&amp;gt; {
    const val_keys = Object.keys(val)
    val_keys.forEach((key) =&amp;gt; {
      if (![&#39;price&#39;, &#39;qty&#39;].includes(key)) {
        throw new Error(&#39;each item must have a price and qty and no other properties&#39;)
      }
    })
    if (!val_keys.includes(&#39;price&#39;) || !val_keys.includes(&#39;qty&#39;)) {
      throw new Error(&#39;each item must have a price and qty and no other properties&#39;)
    }

    isStringedNumber(val.price, &#39;money&#39;)
    isStringedNumber(val.qty, &#39;quantity&#39;)
  })

  const subtotals = [
    parseFloat(itemSubtotal(parseFloat(input.item1.price), parseFloat(input.item1.qty))),
    parseFloat(itemSubtotal(parseFloat(input.item2.price), parseFloat(input.item2.qty))),
    parseFloat(itemSubtotal(parseFloat(input.item3.price), parseFloat(input.item3.qty))),
  ]

  const billSub = billSubtotal(subtotals)
  const taxes = tax(parseFloat(billSub))
  const billTotal = total(parseFloat(billSub), parseFloat(taxes))

  const output = outputBuilder(billSub, taxes, billTotal)

  return output
}

module.exports = {
  selfCheckout,
  itemSubtotal,
  billSubtotal,
  tax,
  total,
  isStringedNumber,
  outputBuilder,
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Exercises for Programmers 3 - NODEJS</title>
      <link>https://ackso.net/project/exercises-for-programmers-3/</link>
      <pubDate>Thu, 04 Jan 2018 21:41:19 -0700</pubDate>
      
      <guid>https://ackso.net/project/exercises-for-programmers-3/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;m in the midst of working through Chapter 3 of
&lt;a href=&#34;https://pragprog.com/book/bhwb/exercises-for-programmers&#34; target=&#34;_blank&#34;&gt;Exercises for Programmers&lt;/a&gt;
and decided to write an update on my progress because some of these
individual exercises are starting to get a bit long and convoluted,
so I feel like some of them might benefit from being stand-alone posts.
That will certainly be true for Exercise 10, which I finished up last
night, so for this post I&amp;rsquo;m just going to talk about Exercises 7-9.&lt;/p&gt;

&lt;p&gt;Also, &lt;a href=&#34;https://github.com/jeremy-j-ackso/exercises-for-programmers-nodejs&#34; target=&#34;_blank&#34;&gt;here&amp;rsquo;s my Github repo for this project.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#background&#34;&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exercise-7-area-of-a-rectangular-room&#34;&gt;Exercise 7 - Area of a Rectangular Room&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exercise-8-pizza-party&#34;&gt;Exercise 8 - Pizza Party&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exercise-9-paint-calculator&#34;&gt;Exercise 9 - Paint Calculator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;


&lt;h1 id=&#34;background&#34;&gt;Background&lt;/h1&gt;

&lt;p&gt;This chapter is all about calculations.
All of the exercises have you taking some input, doing some calculations,
and then writing the output.
As you might expect you end up getting cozy with your basic 4 functions,
&lt;code&gt;Math&lt;/code&gt; and &lt;code&gt;Number&lt;/code&gt; methods like rounding and defining decimal precision, and validating
that user inputs are parseable digits.
The complexity that is getting introduced in this chapter also really
forces the issue of making sure that you break out your functionality
into smaller component functions, and you can find some rewarding opportunities
for using arguments to slightly modify your function outputs, for instance
when you&amp;rsquo;re converting between imperial and metric units.&lt;/p&gt;

&lt;p&gt;As you might expect, with more component functions comes more tests.
Like I mentioned, last night I got through Exercise 10, and already my test file
for this chapter is around 750 lines long.
I have three more exercises to go for this chapter, so I&amp;rsquo;m figuring it will grow
to be over 1000 lines before this chapter ends.
That being the case, I&amp;rsquo;m not going to post my tests in here because they&amp;rsquo;re
getting to be rather boilerplate-y and I personally wouldn&amp;rsquo;t be interested in scrolling
for ages through similar-looking mocha tests.
However you can definitely go check the tests out
&lt;a href=&#34;https://github.com/jeremy-j-ackso/exercises-for-programmers-nodejs/blob/master/test/ch3.test.js&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My scripts that are implementing the &lt;code&gt;readline&lt;/code&gt; functionality for each of the exercises
are also pretty standard for the three exercises here, so I&amp;rsquo;ll just be linking back to
those on Github rather than showing them here.&lt;/p&gt;

&lt;p&gt;The most interesting thing I learned from doing these exercises is that JavaScript
parses &lt;a href=&#34;https://semver.org/&#34; target=&#34;_blank&#34;&gt;semantic versioning numbers&lt;/a&gt; as Floats (or Integers)
of the Major version, the first dot as the decimal point, and the Minor version.
It ignores the second dot and the Patch version.
This means that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;parseFloat(&#39;1.2.3&#39;) // returns 1.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I had to write tests for this and that also inspired some of my later usage of regular
expressions to validate proper numeric input provided as strings.
That&amp;rsquo;s also something I&amp;rsquo;m going to have to refactor for if I ever go back and do that.
The only reason I discovered this is that when I was writing up my tests I realized
that it should cause the functions to throw an error and I had no idea if it would
or not.&lt;/p&gt;

&lt;p&gt;This was just something that popped into my head and I&amp;rsquo;m glad I wrote that test because
JavaScript is perfectly happy to pretend that these are numbers and will do its
best to accomodate them as such.&lt;/p&gt;

&lt;p&gt;I also tested this in Python and R, and both of them generated errors when attempting
to convert the semver string to some type of numeric, which is what I would have
expected from JavaScript as well.&lt;/p&gt;

&lt;h1 id=&#34;exercise-7-area-of-a-rectangular-room&#34;&gt;Exercise 7 - Area of a Rectangular Room&lt;/h1&gt;

&lt;p&gt;The most fancy thing here is the use of the &lt;code&gt;*=&lt;/code&gt; infix operator to convert
from imperial to metric in the case that the &lt;code&gt;units&lt;/code&gt; required is metric.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jeremy-j-ackso/exercises-for-programmers-nodejs/blob/master/ch3/area-of-rectangle-room.js&#34; target=&#34;_blank&#34;&gt;Here&amp;rsquo;s the &lt;code&gt;readline&lt;/code&gt; function calling it.&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/* eslint comma-dangle: &amp;quot;off&amp;quot;, comma-spacing: &amp;quot;off&amp;quot; */

function sqft(length, width) {
  const invalids = [null, undefined,]
  if (invalids.includes(length) || invalids.includes(width)) {
    throw new Error(&#39;inputs must not be null or undefined&#39;)
  }

  if (!parseFloat(length) || !parseFloat(width)) {
    throw new Error(&#39;length and width must be digits&#39;)
  }

  return `${areaOfRectangle(length, width, &#39;feet&#39;)} square feet`
}

function sqmeters(length, width) {
  const invalids = [null, undefined,]
  if (invalids.includes(length) || invalids.includes(width)) {
    throw new Error(&#39;inputs must not be null or undefined&#39;)
  }

  if (!parseFloat(length) || !parseFloat(width)) {
    throw new Error(&#39;length and width must be digits&#39;)
  }

  return `${areaOfRectangle(length, width, &#39;meters&#39;)} square meters`
}

function dimensions(length, width) {
  const invalids = [null, undefined,]
  if (invalids.includes(length) || invalids.includes(width)) {
    throw new Error(&#39;inputs must not be null or undefined&#39;)
  }

  if (!parseFloat(length) || !parseFloat(width)) {
    throw new Error(&#39;length and width must be digits&#39;)
  }

  return `You entered dimensions of ${length} feet by ${width} feet.`
}

function areaOfRectangle(length, width, unit) {
  const invalids = [null, undefined,]
  if (invalids.includes(length) || invalids.includes(width) || invalids.includes(unit)) {
    throw new Error(&#39;inputs must not be null or undefined&#39;)
  }

  if (![&#39;feet&#39;, &#39;meters&#39;].includes(unit)) {
    throw new Error(&#39;units must be either \&#39;feet\&#39; or \&#39;meters\&#39;&#39;)
  }

  if (!parseFloat(length) || !parseFloat(width)) {
    throw new Error(&#39;length and width must be digits&#39;)
  }

  let area = length * width
  if (unit === &#39;meters&#39;) area *= 0.09290304
  return area.toFixed(3)
}

module.exports = {
  dimensions,
  sqft,
  sqmeters,
  areaOfRectangle,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;exercise-8-pizza-party&#34;&gt;Exercise 8 - Pizza Party&lt;/h1&gt;

&lt;p&gt;This one has you doing both integer division and grabbing remainders!
I also like that I had to write the &lt;code&gt;pluralizer()&lt;/code&gt; function to correctly
decide what word to use based on the number values.
Also, &lt;code&gt;aboutTheParty()&lt;/code&gt; has some extreme string templating going on.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jeremy-j-ackso/exercises-for-programmers-nodejs/blob/master/ch3/pizza-party.js&#34; target=&#34;_blank&#34;&gt;Here&amp;rsquo;s the &lt;code&gt;readline&lt;/code&gt; function calling it.&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function remainingPieces(people, pizzas, pieces) {
  if (typeof people !== &#39;string&#39; || typeof pizzas !== &#39;string&#39; || typeof pieces !== &#39;string&#39;) {
    throw new Error(&#39;arguments to this function must be provided as strings&#39;)
  }

  if (!Number.isInteger(parseFloat(people)) ||
    !Number.isInteger(parseFloat(pizzas)) ||
    !Number.isInteger(parseFloat(pieces))) {
    throw new Error(&#39;arguments must be parseable integer digits&#39;)
  }

  const total_pieces = pizzas * pieces
  const pieces_remain = total_pieces % people
  if (pieces_remain === 1) {
    return `There is ${pieces_remain} leftover piece.`
  }
  return `There are ${pieces_remain} leftover pieces.`
}

function piecesPerPerson(people, pizzas, pieces) {
  if (typeof people !== &#39;string&#39; || typeof pizzas !== &#39;string&#39; || typeof pieces !== &#39;string&#39;) {
    throw new Error(&#39;arguments to this function must be provided as strings&#39;)
  }

  if (!Number.isInteger(parseFloat(people)) ||
    !Number.isInteger(parseFloat(pizzas)) ||
    !Number.isInteger(parseFloat(pieces))) {
    throw new Error(&#39;arguments must be parseable integer digits&#39;)
  }

  const total_pieces = pizzas * pieces
  const pieces_each = Math.floor(total_pieces / people)
  return `Each person gets ${pieces_each} pieces of pizza.`
}

function aboutTheParty(people, pizzas, pieces) {
  if (typeof people !== &#39;string&#39; || typeof pizzas !== &#39;string&#39; || typeof pieces !== &#39;string&#39;) {
    throw new Error(&#39;arguments to this function must be provided as strings&#39;)
  }

  if (!Number.isInteger(parseFloat(people)) ||
    !Number.isInteger(parseFloat(pizzas)) ||
    !Number.isInteger(parseFloat(pieces))) {
    throw new Error(&#39;arguments must be parseable integer digits&#39;)
  }

  return `${people} ${pluralizer(&#39;people&#39;, people)} with ${pizzas} ${pluralizer(&#39;pizzas&#39;, pizzas)}, each pizza having ${pieces} ${pluralizer(&#39;pieces&#39;, pieces)}`
}

function pluralizer(type, val) {
  const plurals = {
    people: [&#39;person&#39;, &#39;people&#39;],
    pizzas: [&#39;pizza&#39;, &#39;pizzas&#39;],
    pieces: [&#39;piece&#39;, &#39;pieces&#39;],
  }

  if (!Object.keys(plurals).includes(type)) {
    throw new Error(&#39;type must be one of [\&#39;person\&#39;, \&#39;pizzas\&#39;, \&#39;pieces\&#39;]&#39;)
  }

  if (typeof val !== &#39;string&#39; || !Number.isInteger(parseFloat(val))) {
    throw new Error(&#39;val must be a parseable integer digit supplied as a string&#39;)
  }

  let lookup_val = val - 1
  if (lookup_val &amp;gt; 1) lookup_val = 1
  return plurals[type][lookup_val]
}

module.exports = {
  remainingPieces,
  piecesPerPerson,
  aboutTheParty,
  pluralizer,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;exercise-9-paint-calculator&#34;&gt;Exercise 9 - Paint Calculator&lt;/h1&gt;

&lt;p&gt;This is another &amp;ldquo;area of a rectangle&amp;rdquo; calculator since it&amp;rsquo;s just focused on the
ceiling of a room.
It does impose some nice rounding requirements though.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jeremy-j-ackso/exercises-for-programmers-nodejs/blob/master/ch3/paintCalc.js&#34; target=&#34;_blank&#34;&gt;Here&amp;rsquo;s the &lt;code&gt;readline&lt;/code&gt; function calling it.&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function paintCalculator(length, width) {
  if (!/^[0-9]+\.?[0-9]*$/.test(length) || typeof length !== &#39;string&#39;) {
    throw new Error(&#39;length must be a parseable number provided as a string&#39;)
  }

  if (!/^[0-9]+\.?[0-9]*$/.test(width) || typeof width !== &#39;string&#39;) {
    throw new Error(&#39;width must be a parseable number provided as a string&#39;)
  }

  const galPerSqFt = 1 / 350
  const sqft_num = dimensions_paint(length, width)

  return Math.ceil(sqft_num * galPerSqFt)
}

function dimensions_paint(length, width) {
  if (!/^[0-9]+\.?[0-9]*$/.test(length) || typeof length !== &#39;string&#39;) {
    throw new Error(&#39;length must be a parseable number provided as a string&#39;)
  }

  if (!/^[0-9]+\.?[0-9]*$/.test(width) || typeof width !== &#39;string&#39;) {
    throw new Error(&#39;width must be a parseable number provided as a string&#39;)
  }

  const length_num = parseFloat(length)
  const width_num = parseFloat(width)
  return length_num * width_num
}

module.exports = {
  paintCalculator,
  dimensions_paint,
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Exercises for Programmers 2 - NODEJS</title>
      <link>https://ackso.net/project/exercises-for-programmers-2/</link>
      <pubDate>Sat, 23 Dec 2017 09:40:33 -0700</pubDate>
      
      <guid>https://ackso.net/project/exercises-for-programmers-2/</guid>
      <description>

&lt;p&gt;It took a couple days (because I was doing them in bed before going to sleep),
but I just finished up Chapter 2 of
&lt;a href=&#34;https://pragprog.com/book/bhwb/exercises-for-programmers&#34; target=&#34;_blank&#34;&gt;Exercises for Programmers&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#background-and-thinking&#34;&gt;Background and Thinking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#package-json&#34;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tests&#34;&gt;Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exercise-1&#34;&gt;Exercise 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exercise-2&#34;&gt;Exercise 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exercise-3&#34;&gt;Exercise 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exercise-4&#34;&gt;Exercise 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exercise-5&#34;&gt;Exercise 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#exercise-6&#34;&gt;Exercise 6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;


&lt;h1 id=&#34;background-and-thinking&#34;&gt;Background and Thinking&lt;/h1&gt;

&lt;p&gt;This chapter is where you actually start in on working on the advertised &amp;ldquo;57 exercises&amp;rdquo;.
It really does want you to be able to run these exercises as stand-alone command-line
programs (and challenges you to also implement in them in various ways, such as with a GUI),
so I decided to yield and get in on Node&amp;rsquo;s &lt;code&gt;readline&lt;/code&gt; package.
&lt;code&gt;readline&lt;/code&gt; is stream-based, so you have a couple of options in how you get it working.
I opted for the callback-style rather than using &lt;code&gt;pipe&lt;/code&gt;, but if I ever go back and refactor
this stuff I&amp;rsquo;ll be implementing &lt;code&gt;pipe&lt;/code&gt; so that the code can be cleaner.&lt;/p&gt;

&lt;p&gt;In order to make testing easier I broke each exercise down into two pieces: a function that
takes the inputs and produces the desired outputs, and a script that implements &lt;code&gt;readlines&lt;/code&gt;
to ask the user questions, calls the aforementioned function, and then &lt;code&gt;console.log()&lt;/code&gt;s the
output.&lt;/p&gt;

&lt;p&gt;I also made a single test file for the whole chapter to keep all these exercises together.
I&amp;rsquo;m still only testing the functions themselves, but I&amp;rsquo;m investigating methods for testing
the &lt;code&gt;readline&lt;/code&gt; scripts as well so that I can also test the interactions between the functions
and their calling scripts.
So far I&amp;rsquo;ve only found a couple of blog posts that explain how to do it, but the methods
being implemented seem to all be pretty verbose and require some finnagling and/or refactoring
the &lt;code&gt;readline&lt;/code&gt; into a &lt;code&gt;Promise&lt;/code&gt;.
I&amp;rsquo;ll probably look into how different packages that provide cli interactivity do this, like
&lt;code&gt;eslint&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While reading up on &lt;code&gt;readline&lt;/code&gt; I also found out about &lt;code&gt;npm link&lt;/code&gt;, and I&amp;rsquo;m really excited for it.
&lt;code&gt;npm link&lt;/code&gt; looks for the &lt;code&gt;bin&lt;/code&gt; object in your &lt;code&gt;package.json&lt;/code&gt; and then creates a symlink from
&lt;code&gt;/usr/bin/&amp;lt;key&amp;gt;&lt;/code&gt; to &lt;code&gt;~/mydir/&amp;lt;value&amp;gt;.js&lt;/code&gt;.
That way you can have your Node scripts run as if they were actual command line programs
that can be called by name rather than by running &lt;code&gt;node &amp;lt;file&amp;gt;.js --arguments ...&lt;/code&gt;.
One thing to keep in mind is that &lt;code&gt;npm link&lt;/code&gt; may break your legitimate functions in &lt;code&gt;/usr/bin&lt;/code&gt;
by creating that symlink.
To avoid that, I added &lt;code&gt;-js&lt;/code&gt; to the end of each of my keys in the &lt;code&gt;bin&lt;/code&gt; object so that it
would never conflict with or break things.
This was the thing I was definitely most excited about learning during this whole chapter.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jeremy-j-ackso/exercises-for-programmers-nodejs&#34; target=&#34;_blank&#34;&gt;My repo&lt;/a&gt; for this
continues to grow. I think I&amp;rsquo;m going to skip branching on this until I start going back for
refactors.&lt;/p&gt;

&lt;h1 id=&#34;package-json&#34;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m just going to drop in my &lt;code&gt;bin&lt;/code&gt; object to keep things short(er).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;quot;bin&amp;quot;: {
  &amp;quot;hello-js&amp;quot;: &amp;quot;./ch2/hello.js&amp;quot;,
  &amp;quot;countChars-js&amp;quot;: &amp;quot;./ch2/countChars.js&amp;quot;,
  &amp;quot;quote-js&amp;quot;: &amp;quot;./ch2/quote.js&amp;quot;,
  &amp;quot;madlib-js&amp;quot;: &amp;quot;./ch2/madlib.js&amp;quot;,
  &amp;quot;simplemath-js&amp;quot;: &amp;quot;./ch2/simplemath.js&amp;quot;,
  &amp;quot;retirement-js&amp;quot;: &amp;quot;./ch2/retirement.js&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;tests&#34;&gt;Tests&lt;/h1&gt;

&lt;p&gt;As I mentioned, I dropped everything from this chapter into a single test file so that they
would be grouped together in my mocha output.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/* eslint no-undef: &amp;quot;off&amp;quot;, no-sparse-arrays: &amp;quot;off&amp;quot;, comma-spacing: &amp;quot;off&amp;quot;, comma-dangle: &amp;quot;off&amp;quot; */

const expect = require(&#39;expect.js&#39;)

const hellof = require(&#39;../ch2/ex1.js&#39;)
const countChars = require(&#39;../ch2/ex2.js&#39;)
const quote = require(&#39;../ch2/ex3.js&#39;)
const madlib = require(&#39;../ch2/ex4.js&#39;)
const simplemath = require(&#39;../ch2/ex5.js&#39;)
const retirement = require(&#39;../ch2/ex6.js&#39;)

describe(&#39;ch2&#39;, () =&amp;gt; {
  describe(&#39;ex1.js&#39;, () =&amp;gt; {
    it(&#39;should return values equal to reference.&#39;, () =&amp;gt; {
      const ref_test = [
        { args: &#39;Jeremy&#39;, expect: &#39;Hello, Jeremy, nice to meet you!&#39; },
        { args: &#39;Sue&#39;, expect: &#39;Hello, Sue, nice to meet you!&#39; },
        { args: &#39;Bob&#39;, expect: &#39;Hello, Bob, nice to meet you!&#39; },
        { args: &#39;Ana&#39;, expect: &#39;Hello, Ana, nice to meet you!&#39; },
        { args: &#39;Tom&#39;, expect: &#39;Hello, Tom, nice to meet you!&#39; },
        { args: &#39;5&#39;, expect: &#39;Hello, 5, nice to meet you!&#39; },
      ]
      ref_test.forEach((test) =&amp;gt; {
        expect(hellof(test.args)).to.eql(test.expect)
      })
    })

    it(&#39;should throw an error if not given a string&#39;, () =&amp;gt; {
      const err_test = [
        { args: undefined },
        { args: null },
        { args: 5 },
      ]
      err_test.forEach((test) =&amp;gt; {
        expect(hellof).withArgs(test.args).to.throwError(&#39;name should be a string&#39;)
      })
    })
  })

  describe(&#39;ex2.js&#39;, () =&amp;gt; {
    it(&#39;should return values equal to reference&#39;, () =&amp;gt; {
      const ref_test = [
        { args: &#39;Jeremy&#39;, expect: 6 },
        { args: &#39;bob&#39;, expect: 3 },
        { args: &#39;eleventy-one&#39;, expect: 12 },
      ]
      ref_test.forEach((test) =&amp;gt; {
        expect(countChars(test.args)).to.equal(test.expect)
      })
    })

    it(&#39;should throw an error if not given a string&#39;, () =&amp;gt; {
      const err_test = [
        { args: undefined },
        { args: null },
        { args: 5 },
      ]
      err_test.forEach((test) =&amp;gt; {
        expect(countChars).withArgs(test.args).to.throwError(&#39;inputString should be a string&#39;)
      })
    })
  })

  describe(&#39;ex3.js&#39;, () =&amp;gt; {
    it(&#39;should return values equal to reference&#39;, () =&amp;gt; {
      const ref_test = [
        { args: [&#39;bob&#39;, &#39;Hi.&#39;], expect: &#39;bob says, &amp;quot;Hi.&amp;quot;&#39; },
        { args: [&#39;Joe&#39;, &#39;Hello.&#39;], expect: &#39;Joe says, &amp;quot;Hello.&amp;quot;&#39; },
        { args: [&#39;R2D2&#39;, &#39;beep-bloop&#39;], expect: &#39;R2D2 says, &amp;quot;beep-bloop&amp;quot;&#39; },
      ]
      ref_test.forEach((test) =&amp;gt; {
        expect(quote(test.args[0], test.args[1])).to.equal(test.expect)
      })
    })

    it(&#39;should throw an error if an argument is empty, undefined, or null&#39;, () =&amp;gt; {
      const err_test = [
        { args: [,] },
        { args: [, &#39;hi&#39;] },
        { args: [&#39;hi&#39;,] },
        { args: [null, null] },
        { args: [null, &#39;hi&#39;] },
        { args: [&#39;hi&#39;, null] },
        { args: [undefined, undefined] },
        { args: [undefined, &#39;hi&#39;] },
        { args: [&#39;hi&#39;, undefined] },
      ]
      err_test.forEach((test) =&amp;gt; {
        expect(quote).withArgs(test.args[0], test.args[1]).to.throwError(&#39;all arguments must be strings&#39;)
      })
    })

    it(&#39;should throw an error if an argument is not a string&#39;, () =&amp;gt; {
      const err_test = [
        { args: [1, &#39;hi&#39;] },
        { args: [&#39;hi&#39;, 1] },
        { args: [1, 1] },
      ]
      err_test.forEach((test) =&amp;gt; {
        expect(quote).withArgs(test.args[0], test.args[1]).to.throwError(&#39;all arguments must be strings&#39;)
      })
    })
  })

  describe(&#39;ex4.js&#39;, () =&amp;gt; {
    it(&#39;should return values equal to reference&#39;, () =&amp;gt; {
      const ref_test = [
        { args: [&#39;dog&#39;, &#39;walk&#39;, &#39;blue&#39;, &#39;quickly&#39;], expect: &#39;Do you walk your blue dog quickly? That\&#39;s hilarious!&#39; },
        { args: [&#39;cat&#39;, &#39;jump&#39;, &#39;lithe&#39;, &#39;anxiously&#39;], expect: &#39;Do you jump your lithe cat anxiously? That\&#39;s hilarious!&#39; },
        { args: [&#39;noun&#39;, &#39;verb&#39;, &#39;adjective&#39;, &#39;adverb&#39;], expect: &#39;Do you verb your adjective noun adverb? That\&#39;s hilarious!&#39; },
      ]
      ref_test.forEach((test) =&amp;gt; {
        expect(madlib(test.args[0], test.args[1], test.args[2], test.args[3])).to.equal(test.expect)
      })
    })

    it(&#39;should throw an error if an argument is empty, undefined, or null&#39;, () =&amp;gt; {
      const err_test = [
        { args: [,,,] },
        { args: [, &#39;hi&#39;,,] },
        { args: [&#39;hi&#39;,,,] },
        { args: [null, null, null, null] },
        { args: [null, &#39;hi&#39;, null, null] },
        { args: [&#39;hi&#39;, null, null, null] },
        { args: [undefined, undefined, undefined, undefined] },
        { args: [undefined, &#39;hi&#39;, undefined, undefined] },
        { args: [&#39;hi&#39;, undefined, undefined, undefined] },
      ]
      err_test.forEach((test) =&amp;gt; {
        expect(madlib).withArgs(test.args[0], test.args[1], test.args[2], test.args[3]).to.throwError(&#39;all arguments must be strings&#39;)
      })
    })

    it(&#39;should throw an error if an argument is not a string&#39;, () =&amp;gt; {
      const err_test = [
        { args: [1, &#39;hi&#39;, &#39;hi&#39;, &#39;hi&#39;] },
        { args: [&#39;hi&#39;, 1, &#39;hi&#39;, &#39;hi&#39;] },
        { args: [1, 1, 1, 1] },
      ]
      err_test.forEach((test) =&amp;gt; {
        expect(madlib).withArgs(test.args[0], test.args[1]).to.throwError(&#39;all arguments must be strings&#39;)
      })
    })
  })

  describe(&#39;ex5.js&#39;, () =&amp;gt; {
    it(&#39;should return values equal to reference&#39;, () =&amp;gt; {
      const ref_test = [
        { args: [&#39;1&#39;, &#39;2&#39;], expect: &#39;1 + 2 = 3\n1 - 2 = -1\n1 * 2 = 2\n1 / 2 = 0.5&#39; },
        { args: [&#39;8&#39;, &#39;3&#39;], expect: &#39;8 + 3 = 11\n8 - 3 = 5\n8 * 3 = 24\n8 / 3 = 2.67&#39; },
        { args: [&#39;19&#39;, &#39;1&#39;], expect: &#39;19 + 1 = 20\n19 - 1 = 18\n19 * 1 = 19\n19 / 1 = 19&#39; },
      ]
      ref_test.forEach((test) =&amp;gt; {
        expect(simplemath(test.args[0], test.args[1])).to.equal(test.expect)
      })
    })

    it(&#39;should throw an error if the string input cannot be coerced to a number&#39;, () =&amp;gt; {
      const err_test = [
        { args: [&#39;one&#39;, &#39;1&#39;] },
        { args: [&#39;1&#39;, &#39;one&#39;] },
        { args: [&#39;one&#39;, &#39;one&#39;] },
      ]
      err_test.forEach((test) =&amp;gt; {
        expect(simplemath).withArgs(test.args[0], test.args[1]).to.throwError(&#39;inputs must be digits&#39;)
      })
    })

    it(&#39;should throw an error if the input is actually a number and not a string&#39;, () =&amp;gt; {
      const err_test = [
        { args: [1, 1] },
        { args: [&#39;one&#39;, 1] },
        { args: [1, &#39;one&#39;] },
      ]
      err_test.forEach((test) =&amp;gt; {
        expect(simplemath).withArgs(test.args[0], test.args[1]).to.throwError(&#39;inputs must be digits&#39;)
      })
    })

    it(&#39;should throw an error if inputs are null or undefined&#39;, () =&amp;gt; {
      const err_test = [
        { args: [,] },
        { args: [undefined,] },
        { args: [, undefined] },
        { args: [undefined, undefined] },
        { args: [null,] },
        { args: [, null] },
        { args: [null, null] },
      ]
      err_test.forEach((test) =&amp;gt; {
        expect(simplemath).withArgs(test.args[0], test.args[1]).to.throwError(&#39;inputs must be digits&#39;)
      })
    })
  })

  describe(&#39;ex6.js&#39;, () =&amp;gt; {
    it(&#39;should return values equal to reference&#39;, () =&amp;gt; {
      const ref_test = [
        { args: [&#39;20&#39;, &#39;40&#39;], expect: &#39;You have 20 years left until you can retire.\nIt\&#39;s 2017, so you can retire in 2037.&#39; },
        { args: [&#39;20&#39;, &#39;60&#39;], expect: &#39;You have 40 years left until you can retire.\nIt\&#39;s 2017, so you can retire in 2057.&#39; },
      ]
      ref_test.forEach((test) =&amp;gt; {
        expect(retirement(test.args[0], test.args[1])).to.equal(test.expect)
      })
    })

    it(&#39;should throw an error if the input is actually a number and not a string&#39;, () =&amp;gt; {
      const err_test = [
        { args: [1, 1] },
        { args: [&#39;one&#39;, 1] },
        { args: [1, &#39;one&#39;] },
      ]
      err_test.forEach((test) =&amp;gt; {
        expect(simplemath).withArgs(test.args[0], test.args[1]).to.throwError(&#39;inputs must be digits&#39;)
      })
    })

    it(&#39;should throw an error if inputs are null or undefined&#39;, () =&amp;gt; {
      const err_test = [
        { args: [,] },
        { args: [undefined,] },
        { args: [, undefined] },
        { args: [undefined, undefined] },
        { args: [null,] },
        { args: [, null] },
        { args: [null, null] },
      ]
      err_test.forEach((test) =&amp;gt; {
        expect(simplemath).withArgs(test.args[0], test.args[1]).to.throwError(&#39;inputs must be digits&#39;)
      })
    })
  })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;exercise-1&#34;&gt;Exercise 1&lt;/h1&gt;

&lt;p&gt;Exercise 1 was just a simple &amp;ldquo;Hello Bob!&amp;rdquo; kind of thing.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s &lt;code&gt;ex1.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function hello(name) {
  if (typeof name !== &#39;string&#39;) throw new Error(&#39;name should be a string&#39;)
  return `Hello, ${name}, nice to meet you!`
}

module.exports = hello
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s it&amp;rsquo;s calling script, &lt;code&gt;hello.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;#!/usr/bin/node

const readline = require(&#39;readline&#39;)
const hellof = require(&#39;./ex1.js&#39;)

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
})

rl.question(&#39;What is your name? &#39;, (name) =&amp;gt; {
  const response = hellof(name)
  console.log(response)
  rl.close()
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;exercise-2&#34;&gt;Exercise 2&lt;/h1&gt;

&lt;p&gt;Exercise 2 outputs the number of characters in a string.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s &lt;code&gt;ex2.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function countChars(inputString) {
  if (typeof inputString !== &#39;string&#39;) throw new Error(&#39;inputString should be a string&#39;)
  const chars = inputString.length
  return chars
}

module.exports = countChars
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s it&amp;rsquo;s calling script, &lt;code&gt;countChars.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;#!/usr/bin/node

const readline = require(&#39;readline&#39;)
const countChars = require(&#39;./ex2.js&#39;)

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
})

rl.question(&#39;What is the input string? &#39;, (inputString) =&amp;gt; {
  const response = countChars(inputString)
  console.log(`${inputString}: ${response}`)
  rl.close()
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;exercise-3&#34;&gt;Exercise 3&lt;/h1&gt;

&lt;p&gt;This exercise asks two questions, which is where taking advantage of &lt;code&gt;pipe&lt;/code&gt; with these
streams starts to show its usefulness. You give it a quote and who said it, and
it puts them together in a single string.&lt;/p&gt;

&lt;p&gt;Here &lt;code&gt;ex3.js&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/* eslint prefer-template: &amp;quot;off&amp;quot; */

// prefer-template is switched off because the book says to use concatenation.

function quote(author, qte) {
  if (typeof author !== &#39;string&#39;) throw new Error(&#39;all arguments must be strings&#39;)
  if (typeof qte !== &#39;string&#39;) throw new Error(&#39;all arguments must be strings&#39;)
  return author + &#39; says, &amp;quot;&#39; + qte + &#39;&amp;quot;&#39;
}

module.exports = quote
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s its calling script, &lt;code&gt;quote.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;#!/usr/bin/node

const readline = require(&#39;readline&#39;)
const quote = require(&#39;./ex3.js&#39;)

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
})

rl.question(&#39;What is the quote? &#39;, (inputQuote) =&amp;gt; {
  rl.question(&#39;Who said it? &#39;, (inputSpeaker) =&amp;gt; {
    const response = quote(inputSpeaker, inputQuote)
    console.log(response)
    rl.close()
  })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;exercise-4&#34;&gt;Exercise 4&lt;/h1&gt;

&lt;p&gt;This exercise does a basic madlibs-style of string creation. With 4 inputs, I&amp;rsquo;m definitely
seeing callback hell start to creep into the &lt;code&gt;readline&lt;/code&gt; block.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s &lt;code&gt;ex4.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function madlib(noun, verb, adjective, adverb) {
  if (typeof noun !== &#39;string&#39; || typeof verb !== &#39;string&#39; ||
    typeof adjective !== &#39;string&#39; || typeof adverb !== &#39;string&#39;) {
    throw new Error(&#39;all arguments must be strings&#39;)
  }
  return `Do you ${verb} your ${adjective} ${noun} ${adverb}? That&#39;s hilarious!`
}

module.exports = madlib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s its calling script &lt;code&gt;madlib.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;#!/usr/bin/node

const readline = require(&#39;readline&#39;)
const madlib = require(&#39;../ch2/ex4.js&#39;)


const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
})

let builder = {}
rl.question(&#39;Enter a noun: &#39;, (noun) =&amp;gt; {
  builder.noun = noun
  rl.question(&#39;Enter a verb: &#39;, (verb) =&amp;gt; {
    builder.verb = verb
    rl.question(&#39;Enter an adjective: &#39;, (adjective) =&amp;gt; {
      builder.adjective = adjective
      rl.question(&#39;Enter an adverb: &#39;, (adverb) =&amp;gt; {
        builder.adverb = adverb
        console.log(madlib(builder.noun, builder.verb, builder.adjective, builder.adverb))
        rl.close()
      })
    })
  })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;exercise-5&#34;&gt;Exercise 5&lt;/h1&gt;

&lt;p&gt;This one does the basic four arithmetic functions on two input numbers.
I can probably refactor how I&amp;rsquo;m producing the output string to be a bit more elegant and shorter
(I&amp;rsquo;m thinking string concatenation with array destructuring), but this is fine for a
first stab at it.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s &lt;code&gt;ex5.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/* eslint no-restricted-globals: &amp;quot;off&amp;quot; */

function simplemath(firstNum, secondNum) {
  if (isNaN(Number(firstNum))) throw new Error(&#39;inputs must be digits&#39;)
  if (isNaN(Number(secondNum))) throw new Error(&#39;inputs must be digits&#39;)

  if (typeof firstNum !== &#39;string&#39;) throw new Error(&#39;inputs must be digits&#39;)
  if (typeof secondNum !== &#39;string&#39;) throw new Error(&#39;inputs must be digits&#39;)

  const fnum = Number(firstNum)
  const snum = Number(secondNum)

  let mathObj = {
    add: fnum + snum,
    subtract: fnum - snum,
    multiply: fnum * snum,
    divide: fnum / snum,
  }

  mathObj.divide = parseFloat(mathObj.divide.toFixed(2))

  return `${fnum} + ${snum} = ${mathObj.add}\n${fnum} - ${snum} = ${mathObj.subtract}\n${fnum} * ${snum} = ${mathObj.multiply}\n${fnum} / ${snum} = ${mathObj.divide}`
}

module.exports = simplemath
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s its calling script &lt;code&gt;simplemath.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;#!/usr/bin/node

const readline = require(&#39;readline&#39;)
const simplemath = require(&#39;./ex5.js&#39;)

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
})

let values = {}
rl.question(&#39;What is the first number? &#39;, (firstNumber) =&amp;gt; {
  values.firstNumber = firstNumber
  rl.question(&#39;What is the second number? &#39;, (secondNumber) =&amp;gt; {
    values.secondNumber = secondNumber
    console.log(simplemath(values.firstNumber, values.secondNumber))
    rl.close()
  })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;exercise-6&#34;&gt;Exercise 6&lt;/h1&gt;

&lt;p&gt;This exercise starts incorporating &lt;code&gt;Date()&lt;/code&gt; and doing math with that. Other than that, it&amp;rsquo;s
pretty much the same as the others.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s &lt;code&gt;ex6.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/* eslint no-restricted-globals: &amp;quot;off&amp;quot; */

function retirement(currentAge, retirementAge) {
  if (isNaN(Number(currentAge))) throw new Error(&#39;inputs must be digits&#39;)
  if (isNaN(Number(retirementAge))) throw new Error(&#39;inputs must be digits&#39;)

  if (typeof currentAge !== &#39;string&#39;) throw new Error(&#39;inputs must be digits&#39;)
  if (typeof retirementAge !== &#39;string&#39;) throw new Error(&#39;inputs must be digits&#39;)

  const years = retirementAge - currentAge
  const curYear = new Date().getFullYear()
  const retYear = curYear + years
  return `You have ${years} years left until you can retire.\nIt&#39;s ${curYear}, so you can retire in ${retYear}.`
}

module.exports = retirement
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s its calling script, &lt;code&gt;retirement.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;#!/usr/bin/node

const readline = require(&#39;readline&#39;)
const retirement = require(&#39;./ex6.js&#39;)

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
})

let values = {}
rl.question(&#39;What is your current age? &#39;, (firstNumber) =&amp;gt; {
  values.firstNumber = firstNumber
  rl.question(&#39;At what age would you like to retire? &#39;, (secondNumber) =&amp;gt; {
    values.secondNumber = secondNumber
    console.log(retirement(values.firstNumber, values.secondNumber))
    rl.close()
  })
})
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Exercises for Programmers 1 - NodeJS</title>
      <link>https://ackso.net/project/exercises-for-programmers-1/</link>
      <pubDate>Tue, 19 Dec 2017 21:07:16 -0700</pubDate>
      
      <guid>https://ackso.net/project/exercises-for-programmers-1/</guid>
      <description>

&lt;p&gt;I decided to start working through exercises in
&lt;a href=&#34;https://pragprog.com/book/bhwb/exercises-for-programmers&#34; target=&#34;_blank&#34;&gt;Exercises for Programmers&lt;/a&gt;
and sticking my solutions and thoughts here.
I definitely encourage you to buy directly from &lt;a href=&#34;https://pragprog.com&#34; target=&#34;_blank&#34;&gt;The Pragmatic Bookshelf&lt;/a&gt;.
I really love their books because they have great depth and they often cover a lot
of things that are of interest and value to the technical community, but aren&amp;rsquo;t
just about tech.
A great example of this is
&lt;a href=&#34;https://pragprog.com/book/ahptl/pragmatic-thinking-and-learning&#34; target=&#34;_blank&#34;&gt;Pragmatic Thinking and Learning&lt;/a&gt;
which I&amp;rsquo;ve gotten a great deal of value from.&lt;/p&gt;

&lt;p&gt;Anyhow, on with the first exercise in the book!&lt;/p&gt;

&lt;h1 id=&#34;chapter-1&#34;&gt;Chapter 1&lt;/h1&gt;

&lt;p&gt;The Chapter 1 exercise to kick things off is for creating a tip calculator.
The book wants it to be an interactive program, using &lt;code&gt;readlines&lt;/code&gt;-type functionality.
I&amp;rsquo;m opting (for now at least) to just write functions that take the parameters as defined
in the problem, and outputting an object or something that can be fairly easily parsed.
This lets me easily test it.&lt;/p&gt;

&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m using &lt;a href=&#34;https://mochajs.org&#34; target=&#34;_blank&#34;&gt;Mocha&lt;/a&gt; with &lt;a href=&#34;https://github.com/Automattic/expect.js&#34; target=&#34;_blank&#34;&gt;Expect.js&lt;/a&gt;
for my testing.
I started out with just a couple simple tests to verify that the outputs from known inputs
matched some reference values and used that as my only test until things started working.
From there I started adding in other test conditions, like what should happen if strings or
&lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; values are enterred, and added conditionals in my function to check
for and handle these scenarios.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s my &lt;code&gt;ch1.test.js&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/* eslint no-undef: &amp;quot;off&amp;quot; */

let expect = require(&#39;expect.js&#39;)
let tipCalculator = require(&#39;../ch1&#39;)

describe(&#39;tipCalculator&#39;, () =&amp;gt; {
  let ref_tests = [
    { args: [1, 15], expected: { tip: 0.15, total: 1.15 } },
    { args: [15, 20], expected: { tip: 3.00, total: 18.00 } },
    { args: [15.30, 18.5], expected: { tip: 2.83, total: 18.13 } },
  ]
  it(&#39;correctly outputs values equal to reference&#39;, () =&amp;gt; {
    ref_tests.forEach((test) =&amp;gt; {
      expect(tipCalculator(test.args[0], test.args[1])).to.eql(test.expected)
    })
  })

  let err_tests = [
    { args: [&#39;one&#39;, 15], throws: &#39;billAmount must be a number, either float or integer.&#39; },
    { args: [1, &#39;fifteen&#39;], throws: &#39;tipRate must be a number, either float or integer.&#39; },
    { args: [&#39;one&#39;, &#39;fifteen&#39;], throws: &#39;billAmount must be a number, either float or integer.&#39; },
    { args: [0, 15], throws: &#39;billAmount must be greater than 0&#39; },
    { args: [-12, 15], throws: &#39;billAmount must be greater than 0&#39; },
    { args: [12, -15], throws: &#39;tipRate must be greater than 0&#39; },
    { args: [12, 0], throws: &#39;tipRate must be greater than 0&#39; },
    { args: [undefined, 0], throws: &#39;billAmount must be greater than 0&#39; },
    { args: [0, undefined], throws: &#39;tipRate must be greater than 0&#39; },
    { args: [undefined, undefined], throws: &#39;billAmount must be greater than 0&#39; },
    { args: [null, null], throws: &#39;billAmount must be greater than 0&#39; },
  ]
  it(&#39;throw on invalid inputs&#39;, () =&amp;gt; {
    err_tests.forEach((test) =&amp;gt; {
      expect(tipCalculator).withArgs(test.args[0], test.args[1]).to.throwError(test.throws)
    })
  })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tipcalculator-function&#34;&gt;&lt;code&gt;tipCalculator&lt;/code&gt; Function&lt;/h2&gt;

&lt;p&gt;My &lt;code&gt;tipCalculator&lt;/code&gt; function started out just doing the basic math required to calculate the
tip amount and the total bill amount based on the two inputs.
As it started passing the test showing that it was equal to reference and I added more tests
for bad inputs, it necessarily grew in order to handle those things.
Basically, none of that progression should come as a surprise.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the function in all its glory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function tipCalculator(billAmount, tipRate) {
  let bill = billAmount
  let tipPerc = tipRate

  if (typeof bill !== &#39;number&#39;) {
    throw new Error(&#39;billAmount must be a number, either float or integer.&#39;)
  }

  if (typeof tipPerc !== &#39;number&#39;) {
    throw new Error(&#39;tipRate must be a number, either float or integer.&#39;)
  }

  if (bill &amp;lt;= 0) {
    throw new Error(&#39;billAmount must be greater than 0&#39;)
  }

  if (tipPerc &amp;lt;= 0) {
    throw new Error(&#39;tipRate must be greater than 0&#39;)
  }

  if (tipPerc &amp;lt; 1) {
    console.warn(
      &#39;You entered a tipRate less than 1.\n&#39;,
      &#39;The program will still function with this value, however you should know that it &#39;,
      &#39;expects the tipRate to be in the form of, for example 15%, so you would enter 15 &#39;,
      &#39;not 0.15.\n&#39;,
    )
  }

  tipPerc /= 100

  let tip = parseFloat((bill * tipPerc).toFixed(2))
  let total = parseFloat((bill + tip).toFixed(2))

  return { tip, total }
}

module.exports = tipCalculator
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;growing&#34;&gt;Growing&lt;/h2&gt;

&lt;p&gt;After I was mostly finished I started reviewing my work and the documentation for Mocha and
realized that I could set Mocha to watch for changes in my files, which is super handy.
After adding that into my &lt;code&gt;package.json&lt;/code&gt; I also realized that I hadn&amp;rsquo;t seen a single &lt;code&gt;eslint&lt;/code&gt;
message the whole time that I was writing it and realized I had failed to initialize it.
So I got that initialized along with some of my favored &lt;code&gt;eslint&lt;/code&gt; settings and set about to
correcting my linting errors until I made it to what I&amp;rsquo;ve posted here.&lt;/p&gt;

&lt;h1 id=&#34;aftermath&#34;&gt;Aftermath&lt;/h1&gt;

&lt;p&gt;So this was good.
It&amp;rsquo;s been a bit since I&amp;rsquo;ve set up a Node project from scratch, and I&amp;rsquo;m going to keep working
through these exercises and posting on my progress here.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m looking forward to working through Chapter 2.
It has 6 pretty basic exercises, so we&amp;rsquo;ll see if I can get them all into one post, or if it
will take a few to get through.&lt;/p&gt;

&lt;p&gt;Also, you can check out my repo of all of my code for this series of posts
&lt;a href=&#34;https://github.com/jeremy-j-ackso/exercises-for-programmers-nodejs&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
