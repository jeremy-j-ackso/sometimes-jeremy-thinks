<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Sometimes Jeremy Thinks</title>
    <link>https://ackso.net/post/</link>
    <description>Recent content in Posts on Sometimes Jeremy Thinks</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Jeremy T Jackson</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 -0700</lastBuildDate>
    <atom:link href="/post/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>XMPP With Node.js</title>
      <link>https://ackso.net/post/xmpp-with-nodejs/</link>
      <pubDate>Sun, 08 Jul 2018 00:21:20 -0600</pubDate>
      
      <guid>https://ackso.net/post/xmpp-with-nodejs/</guid>
      <description>

&lt;p&gt;XMPP has been around for a long time at this point.  Libraries for most popular
languages exist and work quite well.  There&amp;rsquo;s even an &lt;a href=&#34;https://xmpp.org/about/xmpp-standards-foundation.html&#34; target=&#34;_blank&#34;&gt;XMPP standards
body&lt;/a&gt; that promotes the
official libraries that they suggest based on quality.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://xmppjs.org&#34; target=&#34;_blank&#34;&gt;XMPP.js&lt;/a&gt; library for JavaScript turns out to be really
good, but somehow really poorly documented. There are a couple of half-baked
examples, but I found that it still took time to get something running that
touched on some of the major features of XMPP.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also been working through the 2009
&lt;a href=&#34;http://shop.oreilly.com/product/9780596521271.do&#34; target=&#34;_blank&#34;&gt;XMPP&lt;/a&gt; book from O&amp;rsquo;Reilly,
which is mostly oriented around clients rather than technical implementations,
but is still good for understanding the theory and operations. My only wish is
that this book would also have contained instructions on setting up a Jabber
server.  It would have come in handy.&lt;/p&gt;

&lt;p&gt;Anyhow, below I&amp;rsquo;m going to do a quick walk-through of what I did to get an
&lt;a href=&#34;https://ejabberd.im&#34; target=&#34;_blank&#34;&gt;ejabberd&lt;/a&gt; server running in
&lt;a href=&#34;https://vagrantup.com&#34; target=&#34;_blank&#34;&gt;Vagrant&lt;/a&gt;, connect to it from my laptop using
&lt;a href=&#34;https://pidgin.im&#34; target=&#34;_blank&#34;&gt;Pidgin&lt;/a&gt;, and run the &amp;ldquo;Echo Bot&amp;rdquo; example from the XMPP book,
but using Node.js instead of Python. The Echo Bot just repeats everything you IM
to it. Nothing too fancy.&lt;/p&gt;

&lt;p&gt;The GitLab repo for this project is
&lt;a href=&#34;https://gitlab.com/jeremy.jackson/use-xmpp&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; if you don&amp;rsquo;t want to take the
time to implement this yourself.&lt;/p&gt;

&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ejabberd-in-vagrant&#34;&gt;ejabberd in Vagrant&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#here-s-my-vagrantfile&#34;&gt;Here&amp;rsquo;s my &lt;code&gt;Vagrantfile&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#here-s-my-setup-sh&#34;&gt;Here&amp;rsquo;s my &lt;code&gt;setup.sh&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#installing-pidgin&#34;&gt;Installing Pidgin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#node-js-echo-bot&#34;&gt;Node.js Echo Bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#running-it-all&#34;&gt;Running it all&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;


&lt;h1 id=&#34;ejabberd-in-vagrant&#34;&gt;ejabberd in Vagrant&lt;/h1&gt;

&lt;p&gt;I ended up just setting up a quick and easy Ubuntu 16.04 server in Vagrant. I
used the &lt;code&gt;ejabberd&lt;/code&gt; that was in the repo and everything went great.
With some minimal configuration and user adding in the setup script everything
runs very well.&lt;/p&gt;

&lt;h2 id=&#34;here-s-my-vagrantfile&#34;&gt;Here&amp;rsquo;s my &lt;code&gt;Vagrantfile&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Take special note of the forwarded ports. Port 5280 is for the web admin panel,
and port 5222 is the TCP port that ejabberd talks over. There&amp;rsquo;s several
different protocols that you can use, like UDP, based on your own configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure(&amp;quot;2&amp;quot;) do |config|
  config.vm.box = &amp;quot;bento/ubuntu-16.04&amp;quot;

  config.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 5280, host: 5280, host_ip: &amp;quot;127.0.0.1&amp;quot;
  config.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 5222, host: 5222, host_ip: &amp;quot;127.0.0.1&amp;quot;

  config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|
    vb.memory = &amp;quot;1024&amp;quot;
    vb.cpus = &amp;quot;1&amp;quot;
  end

  config.vm.provision &amp;quot;shell&amp;quot;, path: &amp;quot;setup.sh&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;here-s-my-setup-sh&#34;&gt;Here&amp;rsquo;s my &lt;code&gt;setup.sh&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Nothing too crazy here. The &lt;code&gt;sed&lt;/code&gt; lines are just modifying some relevant
configs in &lt;code&gt;ejabberd&lt;/code&gt;&amp;rsquo;s config file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-get update

apt-get install -y ejabberd

# It defaults to IPv6, but I want IPv4 just to keep things simple here.
sed -i &#39;s/    ip: &amp;quot;::&amp;quot;/    ip: &amp;quot;0.0.0.0&amp;quot;/g&#39; /etc/ejabberd/ejabberd.yml

# This is just setting up the admin user.
sed -i &#39;s/         - &amp;quot;&amp;quot;: &amp;quot;localhost&amp;quot;/         - &amp;quot;admin&amp;quot;: &amp;quot;localhost&amp;quot;/&#39; /etc/ejabberd/ejabberd.yml

systemctl restart ejabberd

# I was surprised that the restart took long enough that the ejabberdctl
# commands below were failing.
sleep 5

ejabberdctl register admin localhost password
ejabberdctl register echo_bot localhost password
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;installing-pidgin&#34;&gt;Installing Pidgin&lt;/h1&gt;

&lt;p&gt;Pidgin is a Jabber-compliant Instant Messaging client for Linux, MacOS, and
Windows. They also provide source code. If you&amp;rsquo;re using MacOS, they do suggest
using &lt;a href=&#34;https://adium.io&#34; target=&#34;_blank&#34;&gt;Adium&lt;/a&gt; instead.&lt;/p&gt;

&lt;p&gt;One of the best features of Pidgin (and probably Adium) is that it has an XMPP
Console that you can enable in the Plugins section of the application. That way
you can see all of the XMPP stanzas being passed between the client and server,
and you can even use it to enter raw XMPP stanzas if you so choose. It&amp;rsquo;s
pretty rad.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m on Debian 9, so I just used the one in the repo&amp;rsquo;s.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install -y pidgin
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;node-js-echo-bot&#34;&gt;Node.js Echo Bot&lt;/h1&gt;

&lt;p&gt;This simple bot will let you subscribe to its status, and in chat will repeat
everything you say. See the comments for some more details.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Client is the actual Client class, xml is a convenience function for building
// valid XML.
const { Client, xml } = require(&#39;xmpp.js&#39;);

const client = new Client();

// Node doesn&#39;t like self-signed certificates. You could also pass this as an
// environment variable.
process.env.NODE_TLS_REJECT_UNAUTHORIZED = &#39;0&#39;;

// Here we get into the event-based actions.
// I&#39;m logging everything so that you can see what&#39;s getting passed through at
// each of these stages. It gets pretty interesting and looking at this helped me a
// ton when doing some debugging.
client.on(&#39;error&#39;, err =&amp;gt; console.log(&#39;ERROR:&#39;, err.toString));

client.on(&#39;status&#39;, status =&amp;gt; console.log(&#39;STATUS:&#39;, status));

client.on(&#39;input&#39;, input =&amp;gt; console.log(&#39;INPUT:&#39;, input));

client.on(&#39;output&#39;, output =&amp;gt; console.log(&#39;OUTPUT:&#39;, output));

// Most of the magic happens here. You can set up all your conditions for the
// various XMPP stanzas that you receive. You can be creative with this, for
// instance you could have the bot running on a Raspberry Pi and change
// some status LED&#39;s based on the message.
client.on(&#39;stanza&#39;, stanza =&amp;gt; {
  console.log(&#39;STANZA:&#39;, JSON.stringify(stanza.toJSON()));

  // This acts on requests from other clients to watch the status of this bot
  // so that the other client can see whether or not this bot is online.
  if (stanza.is(&#39;presence&#39;) &amp;amp;&amp;amp; stanza.attrs.type === &#39;subscribe&#39;) {
    client.send(
      xml(&#39;presence&#39;, { to: stanza.attrs.from, type: &#39;subscribed&#39; })
    );
  }

  // This is doing the echoing.
  if (stanza.is(&#39;message&#39;) &amp;amp;&amp;amp; stanza.attrs.from !== client.jid) {
    stanza.children.forEach(child =&amp;gt; {
      if (child.name === &#39;body&#39;) {
        const response = child.children.join(&#39;\n&#39;);
        client.send(
          xml(&#39;message&#39;, { to: stanza.attrs.from, type: &#39;chat&#39; },
            xml(&#39;body&#39;, {}, response)
          )
        );
      }
    });
  }
});

// When the bot comes online it updates its status to let you know that it&#39;s
// ready to talk back to you.
client.on(&#39;online&#39;, jid =&amp;gt; {
  console.log(&#39;ONLINE:&#39;, jid.toString());
  client.send(
    xml(&#39;presence&#39;, {}, 
      xml(&#39;show&#39;, {}, &#39;chat&#39;),
      xml(&#39;status&#39;, {}, &#39;I say everything you do!&#39;),
    )
  );
});

// This is just handling the client authentication.
client.handle(&#39;authenticate&#39;, authenticate =&amp;gt; {
  return authenticate(&#39;echo_bot&#39;, &#39;password&#39;);
});

// This actually launches the server.
client
  .start(&#39;xmpp://localhost:5222&#39;)
  .catch(err =&amp;gt; console.error(&#39;start failed&#39;, err.message));
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;running-it-all&#34;&gt;Running it all&lt;/h1&gt;

&lt;p&gt;To get this whole thing running you need to first launch the vagrant box, then
create a new account in Pidgin for &lt;code&gt;admin@localhost&lt;/code&gt; using the fake &lt;code&gt;password&lt;/code&gt;,
and then launch the Echo Bot (&lt;code&gt;node index.js&lt;/code&gt;). You&amp;rsquo;ll see some console output from the bot
registering with the &lt;code&gt;ejabberd&lt;/code&gt; server, and then it will just wait. Once it&amp;rsquo;s
waiting, you can &amp;ldquo;Add a Buddy&amp;rdquo; in Pidgin, by looking for &lt;code&gt;echo_bot@localhost&lt;/code&gt;.
The Echo Bot will pick that up so that you can then see its status in Pidgin.
Lastly, you can go ahead and open up a chat with your new &lt;code&gt;echo_bot&lt;/code&gt; buddy, and
it will repeat everything back to you.&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This library has a couple of other components as well, but what they do and how
to use them I have no idea because the documentation is basically non-existent.
I&amp;rsquo;ll be sure to update here if/when I get to those other features.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>First Steps With Apache Kafka</title>
      <link>https://ackso.net/post/first-steps-with-apache-kafka/</link>
      <pubDate>Sat, 07 Apr 2018 16:35:17 -0600</pubDate>
      
      <guid>https://ackso.net/post/first-steps-with-apache-kafka/</guid>
      <description>

&lt;p&gt;Apache Kafka is the de-facto streaming platform in use by data engineers right now.
It comes integrated with many of the commercial Hadoop distributions, and is used
extensively at companies that are dealing with event-based data.&lt;/p&gt;

&lt;p&gt;So, here&amp;rsquo;s my first steps at messing around with it.&lt;/p&gt;

&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#yesterday-2018-04-06&#34;&gt;Yesterday, 2018-04-06&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#last-night-2018-04-06&#34;&gt;Last Night, 2018-04-06&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#today-2018-04-07&#34;&gt;Today, 2018-04-07&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#next&#34;&gt;Next&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;


&lt;h1 id=&#34;yesterday-2018-04-06&#34;&gt;Yesterday, 2018-04-06&lt;/h1&gt;

&lt;p&gt;I got some good advice from an experienced data engineer about what I needed to get
into my toolset in order to be a strong data engineer.
His advice was to focus on getting a few examples of working with Apache Kafka and
Apache Spark out there.
So I&amp;rsquo;m going to do a few posts as I work through that.&lt;/p&gt;

&lt;h1 id=&#34;last-night-2018-04-06&#34;&gt;Last Night, 2018-04-06&lt;/h1&gt;

&lt;p&gt;I built out a &lt;code&gt;Vagrantfile&lt;/code&gt; that installs and sets up Kafka.
This was just a modification to their &lt;a href=&#34;http://kafka.apache.org/quickstart&#34; target=&#34;_blank&#34;&gt;quickstart&lt;/a&gt;
instructions, and it worked without a hitch.
If you want to check it out you can clone my repo, &lt;code&gt;git checkout&lt;/code&gt; the &lt;code&gt;single-broker&lt;/code&gt;
tag, &lt;code&gt;vagrant up&lt;/code&gt;, login to the machine and pick up with quickstart instructions
for Steps 3-5.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://gitlab.com/jeremy.jackson/kafka-experimenting.git
git checkout single-broker
vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And Steps 3-5 can be summarized as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Do these to get to the right spot for the following commands:
vagrant ssh
cd kafka_2.11-1.1.0

# Step 3:
bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test
bin/kafka-topics.sh --list --zookeeper localhost:2181

# Step 4:
bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test

# At this point you could optionally enter a few messages for the broker to store.

# Step 5 (You should do this in a second terminal since your first one will be waiting for input):
bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning

# You should get output from the previous messages, and any additional messages that you give
# to the broker should appear in the consumer&#39;s terminal in a very short amount of time.
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;today-2018-04-07&#34;&gt;Today, 2018-04-07&lt;/h1&gt;

&lt;p&gt;Today, feeling motivated after last night&amp;rsquo;s success, I decided to start working on
a multi-broker set up, still following the quickstart instructions.&lt;/p&gt;

&lt;p&gt;I added some code to my &lt;code&gt;Vagrantfile&lt;/code&gt; to do some configuration customization of each of the
brokers that would be running, did some troubleshooting on my &lt;code&gt;sed&lt;/code&gt; scripts &amp;amp; skills,
and got that running as well.
Took me a total of about 2 hours because I was being dumb about &lt;code&gt;sed&lt;/code&gt;, taking lots of breaks, etc.&lt;/p&gt;

&lt;p&gt;That is stored at the &lt;code&gt;multi-broker&lt;/code&gt; tag in git.
This one goes a little further than the &lt;code&gt;single-broker&lt;/code&gt; tag does by also creating the topic
as part of the initial scripting.&lt;/p&gt;

&lt;p&gt;You should be able to just SSH into this version of the vagrant box and immediately
start up the console producer and consumer.
Interesting thing to note about this one that isn&amp;rsquo;t mentioned in the quickstart that I wasn&amp;rsquo;t
too surprised worked well is that the producer and consumer don&amp;rsquo;t need to be attached to the
same broker.
If you connect the producer to the broker on port 9092 you can connect your consumer
to the broker on port 9093 or 9094 (or all of them), and it will work fine.
Part of me wants to connect six terminals to producers and consumers for each of these
brokers and just mess around watching the messages propagate.&lt;/p&gt;

&lt;h1 id=&#34;next&#34;&gt;Next&lt;/h1&gt;

&lt;p&gt;Dinner.&lt;/p&gt;

&lt;p&gt;Then I&amp;rsquo;m considering if I want to head up to &lt;a href=&#34;http://www.alleycatcoffeehouse.com/&#34; target=&#34;_blank&#34;&gt;The Alley Cat&lt;/a&gt;
to keep working into the night on kafka.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d like to get the multi-broker example working in a
&lt;a href=&#34;https://www.vagrantup.com/docs/multi-machine/&#34; target=&#34;_blank&#34;&gt;vagrant multi-machine&lt;/a&gt;
so that each broker is running on one host.
I&amp;rsquo;m not 100% sure how that&amp;rsquo;s going to work out, especially with Zookeeper, since I&amp;rsquo;m
not sure if I&amp;rsquo;ll need to add some zookeeper configuration for multiple hosts.
I might be wanting to take this in a direction that wouldn&amp;rsquo;t quickly accomplish the advice
I was given, so I might jump right into Spark instead.
Maybe I&amp;rsquo;ll spend an hour or two on it, see how far I get and then decide if I want to bail
on that plan to work on Spark instead.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Experimenting With GitLab CI</title>
      <link>https://ackso.net/post/experimenting-with-gitlab-ci/</link>
      <pubDate>Tue, 03 Apr 2018 20:57:42 -0600</pubDate>
      
      <guid>https://ackso.net/post/experimenting-with-gitlab-ci/</guid>
      <description>

&lt;p&gt;So last weekend I really buckled down on a project that I started a couple weeks
ago before I came down with a really bad cold and was laid-up for a couple days.
I was trying to figure out a bunch of different things: how to use Docker in my
web development workflow, how to make use of GitLab CI in that workflow, and
more things in the vein of converting my workflow to be more amenable to Continuous
Integration.
This last weekend was the first in many that I was fully feeling myself, so I
decided to finish that up and really figure out what I was failing to grasp before.&lt;/p&gt;

&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#what-i-wasn-t-grokking-about-docker&#34;&gt;What I wasn&amp;rsquo;t grokking about Docker.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#what-i-wasn-t-grokking-about-gitlab-ci&#34;&gt;What I wasn&amp;rsquo;t grokking about GitLab CI.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#what-happened-last-weekend&#34;&gt;What happened last weekend.&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#first-steps&#34;&gt;First Steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#adding-a-database&#34;&gt;Adding a database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#getting-those-dope-ass-badges&#34;&gt;Getting those dope-ass badges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#adding-on-code-climate&#34;&gt;Adding on Code Climate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#going-even-further&#34;&gt;Going even further&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#where-to-find-it&#34;&gt;Where to find it.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#what-s-next&#34;&gt;What&amp;rsquo;s next?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;


&lt;h1 id=&#34;what-i-wasn-t-grokking-about-docker&#34;&gt;What I wasn&amp;rsquo;t grokking about Docker.&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m very familiar with setting up Vagrant boxes and using them to prototype my
deployment environments.
I&amp;rsquo;ve even dabbled a little bit into Chef for configuration management, though
I&amp;rsquo;m not totally grokking that either (there may be an upcoming post on Ansible
because I think I might be able to grok that over a couple of weekends).
What I was having trouble with in Docker was how to make all the containers
work together and how they should talk to each other.&lt;/p&gt;

&lt;p&gt;My web development projects thus far have all been small-scale.
Each one can happily reside on a modest server and perform very well, and that
includes the whole OS, webserver, database, and application server.
Because of that, everything is talking to each over &lt;code&gt;localhost&lt;/code&gt;, which makes
networking and most security issues extremely easy to deal with.
However, all of my previous attempts to dockerize even one part of this stack
have totally failed because of networking issues.
I just couldn&amp;rsquo;t figure out how to make my locally-running application talk to
a dockerized database.
Because of those troubles I figured that trying to dockerize each or most of
those pieces would end up totally failling.
I was probably right at the time, but mostly due to my then (and still) very
limited knowledge of container networking and orchestration.&lt;/p&gt;

&lt;h1 id=&#34;what-i-wasn-t-grokking-about-gitlab-ci&#34;&gt;What I wasn&amp;rsquo;t grokking about GitLab CI.&lt;/h1&gt;

&lt;p&gt;I knew at some level that GitLab CI was also using Docker to achieve things,
and because of my previously-mentioned problems in Docker networking and
orchestration and not knowing how to build my applications to work for Dockerized
applications and databases, I just kept failing and failing to get GitLab CI
to work.
This was before I discovered that you could just run arbitrary bash in many of
these containers.&lt;/p&gt;

&lt;h1 id=&#34;what-happened-last-weekend&#34;&gt;What happened last weekend.&lt;/h1&gt;

&lt;p&gt;Last weekend, I decided to fix all of this and I knew that I had to start with
Docker.
I&amp;rsquo;ve been following Docker on Twitter and seeing a lot about &lt;code&gt;docker-compose&lt;/code&gt;.
So I read the &lt;a href=&#34;https://docs.docker.com/compose/gettingstarted/&#34; target=&#34;_blank&#34;&gt;Getting Started guide&lt;/a&gt;
and it immediately seemed to make sense.
I decided to convert the repo I had been working on to use &lt;code&gt;docker-compose&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;first-steps&#34;&gt;First Steps&lt;/h2&gt;

&lt;p&gt;My first step was to just grab a generic ubuntu docker image, run all the commands
to install Node, install my dependencies, and get the Express server running.
I was able to get a minimal example that didn&amp;rsquo;t rely on a database or any other
services running in under an hour, and when I succeeded I was over the moon
with joy.
I also suspected that I may have had enough to make running a minimal test suite
in GitLab CI possible.
So I looked at the documentation for that, watched a couple of webinars put on
by the GitLab sales staff, and immediately saw the similarity between how you
set up &lt;code&gt;docker-compose&lt;/code&gt; and how you set up GitLab CI.
I got GitLab CI running with passing jobs on my next push and got that rush
of joy again.
Why didn&amp;rsquo;t things fall into place like this last time?&lt;/p&gt;

&lt;h2 id=&#34;adding-a-database&#34;&gt;Adding a database&lt;/h2&gt;

&lt;p&gt;I immediately started reading up on services in &lt;code&gt;docker-compose&lt;/code&gt;, again noticing
the similarity to the GitLab CI documentation on how services work.
I was able to get a &lt;code&gt;couchdb:2.1.1&lt;/code&gt; container to talk to my ubuntu container
very quickly, just testing it with &lt;code&gt;curl&lt;/code&gt;, and based on that messing around I
came to the conclusion that I could set up some Express routes to talk to this
datbase.
So I did.&lt;/p&gt;

&lt;p&gt;I wrote tests for it as well, and figured out how I could run arbitrary commands
on my containers so that I could do local runs of my test suite.
This also solved another problem that had been vexxing me for a long time: I no
longer needed to mock a database for my test suite.
I could just set up an empty docker container with my database all set up to use
for testing against, which would be more like real life anyhow.
Sure it would take a little longer to get the containers running than using a
database mocking library, but we&amp;rsquo;re talking about seconds, so it&amp;rsquo;s not really
that big of a deal.&lt;/p&gt;

&lt;p&gt;I also duplicated this service configuration over to my &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; file,
since it had so many similarities to my &lt;code&gt;docker-compose.yml&lt;/code&gt;.
I crossed my fingers, pushed to my repo, and was totally awed when I saw the
correct couchdb image spinning up in the CI job.
I think that particular job failed, but it was probably because of a failing
test rather than the containers not correctly talking to each other.
It was a fixable problem.&lt;/p&gt;

&lt;h2 id=&#34;getting-those-dope-ass-badges&#34;&gt;Getting those dope-ass badges&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve been in awe of badges for build pipelines, code coverage, etc., that I&amp;rsquo;ve
seen on other projects for a couple of years now and I noticed that the project
settings in GitLab had some info on them, so I decided it was time to read up
on that.
I was able to grab the pipeline badge immediately.
The code coverage badge needed a little bit of work though.&lt;/p&gt;

&lt;p&gt;GitLab suggested using &lt;code&gt;tap&lt;/code&gt;.
I was already using &lt;code&gt;mocha&lt;/code&gt; for testing, and didn&amp;rsquo;t really want to switch.
I didn&amp;rsquo;t want to rewrite my tests and I use &lt;code&gt;mocha&lt;/code&gt; at work as well, so I
decided I had to find another way.
I discovered that &lt;code&gt;tap&lt;/code&gt; uses &lt;code&gt;istanbul&lt;/code&gt; via &lt;code&gt;nyc&lt;/code&gt; for code coverage, which
explained the regex that GitLab suggested.
I was able to very quickly get &lt;code&gt;nyc&lt;/code&gt; stuck into my &lt;code&gt;test&lt;/code&gt; npm script, and
with some experimenting with the different reporters, was able to get the
kind of output that would fit the regex GitLab was suggesting for use with
&lt;code&gt;tap&lt;/code&gt; (it&amp;rsquo;s the &lt;code&gt;text-summary&lt;/code&gt; reporter, btw).
A little bit of configuration on the GitLab side later and I had a code
coverage badge gracing my &lt;code&gt;README.md&lt;/code&gt; alongside my &lt;code&gt;build&lt;/code&gt; badge.&lt;/p&gt;

&lt;h2 id=&#34;adding-on-code-climate&#34;&gt;Adding on Code Climate&lt;/h2&gt;

&lt;p&gt;While doing research on code coverage their was also a lot of talk about
Code Climate.
I knew they had their paid tooling, but didn&amp;rsquo;t totally get what was being
done in the GitLab webinars and documentation to make it work.
I also didn&amp;rsquo;t really know how to interpret it (I&amp;rsquo;m still fuzzy on this for
the back end case, but it&amp;rsquo;s clearer for the front end case).
Anyways, not finding any GitLab documentation for how to customize it,
I just copy/pasted GitLab&amp;rsquo;s suggested Code Climate &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; configuration
and it somehow worked in my project.&lt;/p&gt;

&lt;p&gt;Like I mentioned, GitLab&amp;rsquo;s built-in tooling for interpreting the &lt;code&gt;codeclimate.json&lt;/code&gt;
artifact is really great for front end projects, but this being totally a
back end project for the moment, it was just really hard to read and interpret
the JSON.
Maybe that will be corrected in the future.&lt;/p&gt;

&lt;h2 id=&#34;going-even-further&#34;&gt;Going even further&lt;/h2&gt;

&lt;p&gt;I decided that running the full installs of everything each time I had to build
my containers or run my CI jobs was taking way too long, so I thought I should
probably do at least a minimum of research to see if there was a pre-existing
Docker container that could run my application server after only doing an
&lt;code&gt;npm install&lt;/code&gt;.
Lo and behold, three whole minutes of searching yielded the &lt;code&gt;node:8&lt;/code&gt; container.
I implemented that, which made my &lt;code&gt;Dockerfile&lt;/code&gt;, &lt;code&gt;docker-compose.yml&lt;/code&gt;, and
&lt;code&gt;.gitlab-ci.yml&lt;/code&gt; files all smaller, and life immediately got better.&lt;/p&gt;

&lt;h1 id=&#34;where-to-find-it&#34;&gt;Where to find it.&lt;/h1&gt;

&lt;p&gt;The repo is public, as are all of the runs of the pipeline.
I also put a bunch more detail into the &lt;code&gt;README.md&lt;/code&gt;, talking more about the
&amp;ldquo;why&amp;rdquo; of CI, and the instructions for &lt;code&gt;docker-compose&lt;/code&gt; and GitLab CI.
You can find it &lt;a href=&#34;https://gitlab.com/jeremy.jackson/experimenting-with-cicd&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Feel free to clone it, open issues for my abundant and obvious errors,
or even contribute a fix.&lt;/p&gt;

&lt;h1 id=&#34;what-s-next&#34;&gt;What&amp;rsquo;s next?&lt;/h1&gt;

&lt;p&gt;I have three more things I intend to accomplish with this project.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Incorporate a front end that also gets tested, code quality and coverage reports,
and gets built/minified into an artifact.&lt;/li&gt;
&lt;li&gt;Set up a dedicated GitLab CI runner. I&amp;rsquo;m considering a Raspberry Pi for this, though I do
have a couple of older machines that I&amp;rsquo;ve picked up from friends on the cheap that I
could convert for this purpose as well.&lt;/li&gt;
&lt;li&gt;Set up Continuous Deployment. Automating deployment would be tight &amp;ldquo;AEE EFF&amp;rdquo; (as the
kids say).&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Why I Use Vagrant So Much</title>
      <link>https://ackso.net/post/why-i-use-vagrant-so-much/</link>
      <pubDate>Sun, 17 Dec 2017 17:03:13 -0700</pubDate>
      
      <guid>https://ackso.net/post/why-i-use-vagrant-so-much/</guid>
      <description>

&lt;p&gt;I use &lt;a href=&#34;https://vagrantup.com&#34; target=&#34;_blank&#34;&gt;Vagrant&lt;/a&gt; for a bunch of different tasks.
If I&amp;rsquo;m forced to use a Windows-based workstation I like to use Vagrant so that I have a standard
Linux virtual machine available to me at all times so that I can do basic types of tasks
that I might need &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;python&lt;/code&gt;, &lt;code&gt;ruby&lt;/code&gt;, or &lt;code&gt;gnu-utils&lt;/code&gt; for.
I also use it for what it&amp;rsquo;s mostly intended for: &lt;strong&gt;having a development environment that mimics
my targetted deployment environment in as many ways as possible.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Suppose that I&amp;rsquo;m working on a MEAN stack website.
I probably don&amp;rsquo;t want to actually just build it on my machine, especially if I&amp;rsquo;m working with
someone else.
Yes, my personal machines all use Debian Stable, which should be just fine for development that
targets an Ubuntu VM in the cloud, or on a VPS, but my personal machines also have a bunch of
software installed that has nothing to do with the operation of a website.
I&amp;rsquo;m talking about things like window and desktop managers, web browsers, my time tracking
application, sqlite, and lots of other software that&amp;rsquo;s out there.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s complicate this further and suppose that I&amp;rsquo;m collaborating on this with a teammate who&amp;rsquo;s
on a Mac.
Just for the heck of it, let&amp;rsquo;s say that we have third teammate helping us out who&amp;rsquo;s on Windows.
They have all of their own stuff running on their machines that works in different and unique
ways that fail to be close in any way to the deployment target.
So in this situation, we need a way to have a common target that we can develop and test towards.
&lt;strong&gt;This is where Vagrant comes to the rescue.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#about-vagrant&#34;&gt;About Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ways-that-vagrant-helps-our-work&#34;&gt;Ways that Vagrant helps our work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-vagrantfile&#34;&gt;The Vagrantfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#launching-vagrant&#34;&gt;Launching Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dealing-with-misconfiguration&#34;&gt;Dealing with misconfiguration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#wrapping-up&#34;&gt;Wrapping up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;


&lt;h1 id=&#34;about-vagrant&#34;&gt;About Vagrant&lt;/h1&gt;

&lt;p&gt;Vagrant (&lt;a href=&#34;https://github.com/hashicorp/vagrant&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;) is a tool built mostly in Ruby for
driving Virtual Machines across different platforms in a standardized way.
It integrates well with various configuration management tools like Chef, and is even
capable of driving your VM&amp;rsquo;s in most, if not all, major cloud providers.&lt;/p&gt;

&lt;p&gt;I (and my colleagues) predominantly use it to drive VirtualBox on our workstations,
though we&amp;rsquo;re hoping that as our IT org moves more towards infrastructure-as-code we&amp;rsquo;ll
be able to get them to give us standardized images as well as the ability to deploy these
directly to our cloud provider.&lt;/p&gt;

&lt;h1 id=&#34;ways-that-vagrant-helps-our-work&#34;&gt;Ways that Vagrant helps our work&lt;/h1&gt;

&lt;p&gt;So far I&amp;rsquo;ve only explained how Vagrant helps my team collaborate on development towards a common
deployment target, regardless of what kind of operating systems we&amp;rsquo;re actually running on our
workstations.
For actually doing the work, Vagrant also helps in bunch of other ways.&lt;/p&gt;

&lt;p&gt;We automatically suppose that our ultimate deployment target is just going to be a barebones
Linux VM, probably either CentOS or Ubuntu.
However, we have a bunch of software that we need to install in order to be able to get a running
website, analytics service, or database.
Vagrant helps here because we can create provisioning scripts in something like bash (or a
configuration management system if we were more advanced) and lets us provision, modify scripts,
and reprovision virtual machines on our workstations in very quick iterations.
That way, if something is messed up in the way we configured our server or software we can
quickly detect that, fix it in the script, and then reprovision the VM to test and check it out.
We can even include scripts to do things like configuring our &lt;code&gt;cron&lt;/code&gt; jobs, setting up &lt;code&gt;systemd&lt;/code&gt;
so that the process running our website can start on boot and recover from failures,
configure our webserver (like &lt;code&gt;nginx&lt;/code&gt; or &lt;code&gt;apache&lt;/code&gt;), and any number of other things that we
would like to happen during server provisioning.
The best part is that we haven&amp;rsquo;t wasted a dime on our actual deployment server yet!&lt;/p&gt;

&lt;h1 id=&#34;the-vagrantfile&#34;&gt;The Vagrantfile&lt;/h1&gt;

&lt;p&gt;You configure your VM&amp;rsquo;s using a &lt;code&gt;Vagrantfile&lt;/code&gt;, which specifies the VM image you want to use,
the size of the VM (think CPU cores and memory), what kind of a networking situation needs to
happen to make it similar to the deployment target (like available ports, etc), and shared
folders (so that you can still just modify all of your code using your local text editor, and
not whatever is available once you login to the VM).
&lt;code&gt;Vagrantfile&lt;/code&gt;s have a lot of different configuration options, but these are the ones that are
probably most important for a normal user, along with telling it what scripts you want it to
run as part of the provisioning process.
Since your &lt;code&gt;Vagrantfile&lt;/code&gt; is just ruby code, you get the benefit of being able to include it in
your project&amp;rsquo;s repository, so that it can be easily shared with all the members of your team.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s say that you want to use Vagrant for a project.
Doing a basic setup is extremely easy.
You just run &lt;code&gt;vagrant init&lt;/code&gt; and it will create a barebones &lt;code&gt;Vagrantfile&lt;/code&gt; for you to modify
as needed.&lt;/p&gt;

&lt;p&gt;So, what do you put in your &lt;code&gt;Vagrantfile&lt;/code&gt;?
Let&amp;rsquo;s make a list about what we know about our website project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We need to have port 80 available.&lt;/li&gt;
&lt;li&gt;We plan on using &lt;code&gt;nginx&lt;/code&gt; and &lt;code&gt;mysql&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We need NodeJS, version 8.x installed.&lt;/li&gt;
&lt;li&gt;Deployment target is Ubuntu 16.04.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you open your Vagrantfile, it will have a bunch of boilerplate with some sensible defaults
and explanations about common configuration settings that you can have.
I&amp;rsquo;m going to exclude all of that here and just put in the Vagrant configs that we actually need
to accomplish what&amp;rsquo;s in our list.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Vagrant.configure(&amp;quot;2&amp;quot;) do |config|

  # The bento project provides high quality VM images for a number of Linux OS&#39;s.
  config.vm.box = &amp;quot;bento/ubuntu-16.04&amp;quot;

  # We need port 80 on our VM, but let&#39;s forward it port 8080 on the laptop.
  config.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 80, host: 8080

  # Here&#39;s our VirtualBox configurations
  config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = false
  
    # Customize the amount of memory on the VM:
    vb.memory = &amp;quot;1024&amp;quot;
    vb.cores = &amp;quot;2&amp;quot;
  end

  # We could modify this to point at a provision script, but we&#39;ll just do it inline.
  # Keep in mind that everything in this block is run as root at /home/vagrant.
  config.vm.provision &amp;quot;shell&amp;quot;, inline: &amp;lt;&amp;lt;-SHELL
    # Copied from https://github.com/nodesource/distributions
    curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -

    apt-get update
    apt-get install -y nginx mysql git nodejs
  SHELL

end
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;launching-vagrant&#34;&gt;Launching Vagrant&lt;/h1&gt;

&lt;p&gt;Once the Vagrantfile is written we can launch the VM by running &lt;code&gt;vagrant up&lt;/code&gt; and we&amp;rsquo;ll soon
have a running VM.
Keep in mind that the first time you run &lt;code&gt;vagrant up&lt;/code&gt; for any particular Virtual Machine Image
(&lt;code&gt;bento/ubuntu-16.04&lt;/code&gt; in this case), Vagrant will first download the Virtual Machine Image
(called &lt;code&gt;boxes&lt;/code&gt; in Vagrant parlance) into a default VM library, then create a copy of it to be
configured according to what you&amp;rsquo;ve specified.
Because of this, you definitely need a fast internet connection, and ideally should have an SSD
installed to your workstation.
Once you have that box downloaded once, you won&amp;rsquo;t have to download it again, though Vagrant
may let you know when a new version of the box is available for download.&lt;/p&gt;

&lt;p&gt;Vagrant will also print out a bunch of messages describing what it&amp;rsquo;s doing at any given moment,
as well as everything that gets printed to &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; as a result of the commands
run in your &lt;code&gt;config.vm.provision&lt;/code&gt; block.
When the provisioning process is complete, Vagrant will return you to your command prompt with
either a success message or a message that there was some kind of failure.
If it was a success, and even in some failure cases, you should now be able to log in to your
running VM by using &lt;code&gt;vagrant ssh&lt;/code&gt;.
Then, once you&amp;rsquo;re in you can check that everything is as you intended the configuration to be.&lt;/p&gt;

&lt;h1 id=&#34;dealing-with-misconfiguration&#34;&gt;Dealing with misconfiguration&lt;/h1&gt;

&lt;p&gt;If you do find a problem with your configuration you can start editing your &lt;code&gt;Vagrantfile&lt;/code&gt; and
provisioning scripts to correct your mistakes.
Once you&amp;rsquo;re done making your changes you reprovision the VM at a level appropriate for the change
you&amp;rsquo;re making.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Say you&#39;re just changing a minor configuration detail, you can just run:
vagrant reload --provision

# If you made some big changes and want to start with a fresh box:
vagrant destroy
vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Keep in mind that just doing &lt;code&gt;vagrant reload --provision&lt;/code&gt; will also take less time than destroying
and starting totally fresh, so just be aware of what you&amp;rsquo;re doing and not wasting more time than
you need to in getting your configurations correct.&lt;/p&gt;

&lt;h1 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h1&gt;

&lt;p&gt;So we&amp;rsquo;ve covered some good uses and reasons for using Vagrant, we did a quick demo showing off
how to configure a Vagrant box for use in a project, and how to deal with configuration problems.
Now it&amp;rsquo;s up to you to find novel uses of this great piece of software and start building
good, reproducible software with it!&lt;/p&gt;

&lt;h1 id=&#34;resources&#34;&gt;Resources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://vagrantup.com&#34; target=&#34;_blank&#34;&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hashicorp/vagrant&#34; target=&#34;_blank&#34;&gt;Vagrant on Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://virtualbox.org&#34; target=&#34;_blank&#34;&gt;VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hashicorp.com&#34; target=&#34;_blank&#34;&gt;HashiCorp, the makers of Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chef/bento&#34; target=&#34;_blank&#34;&gt;The Bento Project, by Chef.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chef.io&#34; target=&#34;_blank&#34;&gt;Chef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://app.hashicorp.com/boxes/search&#34; target=&#34;_blank&#34;&gt;Discover other Vagrant Boxes here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>My Terminal Configs</title>
      <link>https://ackso.net/post/my-terminal-configs/</link>
      <pubDate>Sun, 17 Dec 2017 14:15:50 -0700</pubDate>
      
      <guid>https://ackso.net/post/my-terminal-configs/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s starting to become more popular for some hiring companies to request your
&amp;ldquo;dot&amp;rdquo; files to show how you configure your environment.
I figure this is probably intended to be something akin to a signalling mechanism,
meaning that you&amp;rsquo;re into the weeds enough to know that on *NIX systems you have
configuration files for each user on the system, typically prefixed with a &amp;ldquo;dot&amp;rdquo;.
Hence we have files like &lt;code&gt;.bashrc&lt;/code&gt; that gets executed when you open a new bash
session and sets up the environment for you.
Same for vim, where you have the &lt;code&gt;.vimrc&lt;/code&gt; file.
You can potentially have many more (including &amp;ldquo;dot&amp;rdquo; folders, like &lt;code&gt;.ssh&lt;/code&gt;), just
depending on what software you use on a regular basis on your *NIX system.&lt;/p&gt;

&lt;p&gt;So I want to show and explain a few of my &amp;ldquo;dot&amp;rdquo; files here, but first, I have a gripe.&lt;/p&gt;

&lt;p&gt;The point of having systems that, to whatever extent they may, conform to POSIX
standards is to facilitate interoperability.
Not only of systems, but users also.
That&amp;rsquo;s why things like &lt;code&gt;vi&lt;/code&gt;, &lt;code&gt;nano&lt;/code&gt;, and &lt;code&gt;gnu-utils&lt;/code&gt; are pretty uniformly auto-installed
on *NIX systems.
That makes it easy for me, Sue the Admin, or Joe the Developer to log in to a
system they never have and at least know the tools available to them.
For that reason, I&amp;rsquo;m not a huge fan of doing a lot of customization of my &amp;ldquo;dot&amp;rdquo; files
and I try to encourage people to know the defaults quite well prior to customizing.&lt;/p&gt;

&lt;p&gt;End of gripe.&lt;/p&gt;

&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#justification&#34;&gt;Justification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bashrc&#34;&gt;.bashrc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vimrc&#34;&gt;.vimrc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tmux-conf&#34;&gt;.tmux.conf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;


&lt;h1 id=&#34;justification&#34;&gt;Justification&lt;/h1&gt;

&lt;p&gt;So I just finished up my gripe about not using the standard tools and I&amp;rsquo;m about to start
talking about &lt;code&gt;vim&lt;/code&gt; and &lt;code&gt;tmux&lt;/code&gt;, neither of which fall into that &amp;ldquo;ubiquitously installed&amp;rdquo;
category.
Well, there&amp;rsquo;s a reason for that.&lt;/p&gt;

&lt;p&gt;I like &lt;code&gt;vi&lt;/code&gt; well enough and can definitely use it without any troubles.
However, &lt;code&gt;vim&lt;/code&gt; gives me some added functionality that is really useful for doing
development work, particularly &lt;code&gt;syntastic&lt;/code&gt; for syntax checking/linting, &lt;code&gt;EDITORCONFIG&lt;/code&gt;,
and some additional keybind functionalities that are just missing from &lt;code&gt;vi&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then there&amp;rsquo;s &lt;code&gt;tmux&lt;/code&gt;.
Again, &lt;code&gt;screen&lt;/code&gt; is perfectly good and I can use it well enough, but there were just
some things that didn&amp;rsquo;t work the way I was hoping.
For instance, &lt;code&gt;screen&lt;/code&gt; requires a lot more combination keybinds to do things that
I would hope would be much simpler, such as splitting panes.
Also, &lt;code&gt;tmux&lt;/code&gt;&amp;rsquo;s configurability is quite a bit stronger.&lt;/p&gt;

&lt;h1 id=&#34;bashrc&#34;&gt;.bashrc&lt;/h1&gt;

&lt;p&gt;My &lt;code&gt;.bashrc&lt;/code&gt; is fairly plain-jane.
The only things that I&amp;rsquo;ve added are to put a few things in &lt;code&gt;$PATH&lt;/code&gt; that are not
enabled by default, like snaps (I&amp;rsquo;m on BunsenLabs Helium/Debian Stretch).
I don&amp;rsquo;t have any special aliases for things that I use a lot because I value
that muscle memory of being able to quickly use the standard built-in tools.&lt;/p&gt;

&lt;p&gt;So, my &lt;code&gt;.bashrc&lt;/code&gt; is the standard &lt;code&gt;.bashrc&lt;/code&gt; that you get when creating a new user
on a Debian system, with the following two lines added at the end.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export PATH=$PATH:/snap/bin
export EDITOR=&#39;vim&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;vimrc&#34;&gt;.vimrc&lt;/h1&gt;

&lt;p&gt;My &lt;code&gt;.vimrc&lt;/code&gt; has a bit more customization for things like &lt;code&gt;EDITORCONFIG&lt;/code&gt;, &lt;code&gt;syntastic&lt;/code&gt;,
and the &lt;code&gt;solarized&lt;/code&gt; color scheme.
Still no special aliases for doing special things.
You&amp;rsquo;ll notice nothing about &lt;code&gt;EDITORCONFIG&lt;/code&gt; here, but it&amp;rsquo;s being brought in by &lt;code&gt;pathogen&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set nocompatible
syntax on
set autoindent		&amp;quot; always set autoindenting on
set smartindent
set nowrap		&amp;quot; turns off text wrapping
set number 		&amp;quot; turns line numbering on
colorscheme solarized
set background=dark
set ruler		&amp;quot; show the cursor position all the time

set smarttab
set softtabstop=2
set expandtab
set shiftwidth=2
set tabstop=2
filetype indent plugin on
set showcmd
set hlsearch
set ignorecase
set smartcase
set ruler
set laststatus=2
set confirm

set cmdheight=2

&amp;quot; Disable python-mode in favor of syntastic
let g:pymode_lint = 0
let g:pymode_lint_on_write = 0

&amp;quot; Syntastic setup
let g:syntastic_aggregate_errors = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_auto_jump = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_javascript_checkers = [&#39;eslint&#39;]
let g:syntastic_python_checkers = [&#39;pep8&#39;, &#39;python&#39;]
let g:syntastic_tex_checkers = [&#39;lacheck&#39;]

let Vimplate=&amp;quot;/usr/bin/vimplate&amp;quot;

&amp;quot; Pathogen config
execute pathogen#infect()
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;tmux-conf&#34;&gt;.tmux.conf&lt;/h1&gt;

&lt;p&gt;Again, not doing much special with tmux.
I&amp;rsquo;ve considered setting up my usual pane layout to automatically be used when I
start a new &lt;code&gt;tmux&lt;/code&gt; session, but I just haven&amp;rsquo;t gotten around to it.
Most of these are the defaults.
The only ones I&amp;rsquo;ve changed are to have a 256 color terminal (because baller),
change the pane index to be 1-based instead of 0-based because it makes it easier
to switch panes one-handed, letting tmux now that I use vim, and making the pane
numbers display a bit longer on screen to give me a second to decide which pane
I want to switch to.&lt;/p&gt;

&lt;p&gt;My standard setup is 3-panes, with my main pane vertical on the right, and the other
two panes split horizontally on the left.
I like this better since it puts the vertical center line between the panes near the
middle of my screen, and therefore the left edge of my text editor is pretty close
to the middle of the screen as well.
&lt;code&gt;tmux&lt;/code&gt; actually has a layout preset that&amp;rsquo;s pretty similar to this called &lt;code&gt;main-vertical&lt;/code&gt;,
however it puts the large &amp;ldquo;main&amp;rdquo; vertical pane on the left instead of the right.
Putting my main pane closer to the middle of the screen is definitely a bit more
natural since that&amp;rsquo;s where my attention will naturally be drawn.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set -g default-terminal &amp;quot;tmux-256color&amp;quot;
set -g pane-base-index 1
set-window-option -g mode-keys vi
set -g display-panes-time 3000
set -g display-time 3000
set -g status-fg cyan # ThG original was: white
set -g status-bg default
set -g status-attr default
set -g status-left &amp;quot;&amp;quot;
if &#39;[ -z &amp;quot;$DISPLAY&amp;quot; ]&#39; &#39;set -g status-left &amp;quot;[#[fg=green] #H #[default]]&amp;quot;&#39;
if &#39;[ -z &amp;quot;$DISPLAY&amp;quot; ]&#39; &#39;set -g status-right &amp;quot;[ #[fg=magenta]#(cat /proc/loadavg | cut -d \&amp;quot; \&amp;quot; -f 1,2,3)#[default] ][ #[fg=cyan,bright]%a %Y-%m-%d %H:%M #[default]]&amp;quot;&#39;
if &#39;[ -z &amp;quot;$DISPLAY&amp;quot; ]&#39; &#39;set -g status-right-length 50&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>The Wedge Pattern</title>
      <link>https://ackso.net/post/the-wedge-pattern/</link>
      <pubDate>Sat, 16 Dec 2017 22:30:48 -0700</pubDate>
      
      <guid>https://ackso.net/post/the-wedge-pattern/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s face it: Excel doesn&amp;rsquo;t respect data.
Unfortunately, tons of people use it and somehow successfully make very important decisions with it.
That means that we have to live with the fallout from that if we&amp;rsquo;re trying to use that badly
formatted data they&amp;rsquo;re producing in meaningful ways.&lt;/p&gt;

&lt;p&gt;One of the worst data patterns that comes out of Excel can be called the &amp;ldquo;Wedge Pattern&amp;rdquo;.
This happens when somebody just throws a bunch of data into a PivotTable and calls it &amp;ldquo;good enough&amp;rdquo;,
without adhering to any sort of common data standard, like repeating values down the entire column,
or having data (or headers) start in the first row of the first column.
It&amp;rsquo;s a real problem, and when it&amp;rsquo;s exported to CSV it looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;,,,,,,
,&amp;quot;Last Name&amp;quot;,&amp;quot;First Name&amp;quot;,&amp;quot;Email&amp;quot;,&amp;quot;Item&amp;quot;,&amp;quot;Quantity&amp;quot;,&amp;quot;Unit Price&amp;quot;,&amp;quot;Subtotal&amp;quot;
,&amp;quot;Smith&amp;quot;,&amp;quot;Sue&amp;quot;,&amp;quot;sue@email.org&amp;quot;,&amp;quot;Coffee&amp;quot;,1,1.00,1.00
,,,&amp;quot;Filters&amp;quot;,5,1.00,5.00
,,,,,&amp;quot;Subtotal&amp;quot;,6.00
,&amp;quot;Bob&amp;quot;,,&amp;quot;Coffee&amp;quot;,2,1.00,2.00
,,,&amp;quot;Filters&amp;quot;,10,1.00,10.00
,,,,,&amp;quot;Subtotal&amp;quot;,12.00
,&amp;quot;Jones&amp;quot;,&amp;quot;Tom&amp;quot;,&amp;quot;tom@email.org&amp;quot;,&amp;quot;Coffee&amp;quot;,3,1.00,3.00
,,,,,&amp;quot;Subtotal&amp;quot;,3.00
,,&amp;quot;Ana&amp;quot;,&amp;quot;ana@email.org&amp;quot;,&amp;quot;Coffee&amp;quot;,8,1.00.8.00
,,,,,&amp;quot;Subtotal&amp;quot;,8.00
,,,,,&amp;quot;Total&amp;quot;,29.00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When it&amp;rsquo;s broken out into a table, the badness of this pattern becomes pretty clear.
I&amp;rsquo;m going to exclude the first row and column, since they aren&amp;rsquo;t necessary for showing the
actual &amp;ldquo;wedge&amp;rdquo; shape here.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Last Name&lt;/th&gt;
&lt;th&gt;First Name&lt;/th&gt;
&lt;th&gt;Email&lt;/th&gt;
&lt;th&gt;Item&lt;/th&gt;
&lt;th&gt;Quantity&lt;/th&gt;
&lt;th&gt;Unit Price&lt;/th&gt;
&lt;th&gt;Subtotal&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Smith&lt;/td&gt;
&lt;td&gt;Sue&lt;/td&gt;
&lt;td&gt;sue@email.org&lt;/td&gt;
&lt;td&gt;Coffee&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Filters&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;5.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Subtotal&lt;/td&gt;
&lt;td&gt;6.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Bob&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Coffee&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;2.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Filters&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;10.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Subtotal&lt;/td&gt;
&lt;td&gt;12.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Jones&lt;/td&gt;
&lt;td&gt;Tom&lt;/td&gt;
&lt;td&gt;tom@email.org&lt;/td&gt;
&lt;td&gt;Coffee&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;3.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Subtotal&lt;/td&gt;
&lt;td&gt;3.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Ana&lt;/td&gt;
&lt;td&gt;ana@email.org&lt;/td&gt;
&lt;td&gt;Coffee&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;1.00&lt;/td&gt;
&lt;td&gt;8.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Subtotal&lt;/td&gt;
&lt;td&gt;8.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;29.00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Fortunately, a little bit of negotiating with this data in R using the &lt;code&gt;tidyverse&lt;/code&gt; packages
can solve this pretty quickly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Assume the CSV has already been read in and we&#39;ve already removed
# the empty first column and row, moved the headers to their proper
# place, and stuck it all in a data.frame named `dat`.
#
# We still have yet to fix the column types.

library(tidyverse)

dat &amp;lt;-
  dat %&amp;gt;%
  fill(`Last Name`, `First Name`)

# At this point we&#39;re doing pretty good, but we still have to deal
# with the Subtotal and Total rows. We&#39;ll fall back on `plyr` for
# this. The reason we need to go there is because of &amp;quot;Bob&amp;quot;.
# He doesn&#39;t have an email address, and we don&#39;t want to carry
# &amp;quot;Sue&#39;s&amp;quot; email address down to him. Using `ddply` will let us
# be flexible in how we handle these different things.

library(plyr)

dat &amp;lt;- ddply(
  dat,
  c(&#39;Last Name&#39;, &#39;First Name&#39;),
  function(x) {
    x &amp;lt;- x[!is.na(x$Item), ]
    x &amp;lt;- x %&amp;gt;% fill(Email)
    return(x)
  }
)

dat$`Unit Price` &amp;lt;- as_numeric(dat$`Unit Price`)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This one is a fairly contrived example, but more complicated specimen of this ilk exist, which
may require you to begin by filling just one or two columns, performing other operations, and
then continuing with the fill.&lt;/p&gt;

&lt;p&gt;So, how can you prevent this in the first place? Evangelism. Pure and simple. Show people a
better way and make them believe that it is a better way.
However, if they&amp;rsquo;re really that dedicated to Excel, you may not be able to sway them.&lt;/p&gt;

&lt;p&gt;Good luck!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
